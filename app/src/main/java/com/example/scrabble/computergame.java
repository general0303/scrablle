package com.example.scrabble;

import androidx.appcompat.app.AppCompatActivity;

import android.content.Intent;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.Toast;

public class computergame extends AppCompatActivity implements View.OnClickListener {
    EditText[][] ed=new EditText[15][15];
    EditText clet, enterword;
    TextView turn;
    TextView point, let;
    Button btn, btn1, confirm, wordcon, check, newgame, helper, start;
    String s, str, str1;
    String[][] p=new String[15][15];
    String[][] p1= new String[15][15];
    static int m=0;
    int q1=1;
    int g=0;
    int d;
    int[] sum=new int[m];
    char[][] letp=new char[m][7];
    char[][] let1=new char[2][7];
    int[] alf=new int[]{
            9, 2, 2, 4, 12, 2, 3, 2, 9, 1, 1, 4, 2, 6, 8, 2, 1, 6, 4, 6, 4, 2, 2, 1, 2, 1 };
    String[] words=new String[]{
            "ABANDON", "ABILITY", "ABLE", "ABORTION", "ABOVE", "ABROAD", "ABSENCE", "ABSOLUTE", "ABSOLUTELY", "ABSORB", "ABUSE", "ACADEMIC", "ACCEPT", "ACCESS", "ACCIDENT", "ACCOMPANY", "ACCOMPLISH", "ACCORDING", "ACCOUNT", "ACCURATE", "ACCUSE", "ACHIEVE", "ACHIEVEMENT", "ACID", "ACKNOWLEDGE", "ACQUIRE", "ACROSS", "ACT", "ACTION", "ACTIVE", "ACTIVIST", "ACTIVITY", "ACTOR", "ACTRESS", "ACTUAL", "ACTUALLY", "ADAPT", "ADD", "ADDITION", "ADDITIONAL", "ADDRESS", "ADEQUATE", "ADJUST", "ADJUSTMENT", "ADMINISTRATION", "ADMINISTRATOR", "ADMIRE", "ADMISSION", "ADMIT", "ADOLESCENT", "ADOPT", "ADULT", "ADVANCE", "ADVANCED", "ADVANTAGE", "ADVENTURE", "ADVERTISING", "ADVICE", "ADVISE", "ADVISER", "ADVOCATE", "AFFAIR", "AFFECT", "AFFORD", "AFRAID", "AFTER", "AFTERNOON", "AGAIN", "AGAINST", "AGE", "AGENCY", "AGENDA", "AGENT", "AGGRESSIVE", "AGO", "AGREE", "AGREEMENT", "AGRICULTURAL", "AHEAD", "AID", "AIDE", "AIM", "AIR", "AIRCRAFT", "AIRLINE", "AIRPORT", "ALBUM", "ALCOHOL", "ALIVE", "ALL", "ALLIANCE", "ALLOW", "ALLY", "ALMOST", "ALONE", "ALONG", "ALREADY", "ALSO", "ALTER", "ALTERNATIVE", "ALTHOUGH", "ALWAYS", "AMAZING", "AMONG", "AMOUNT", "ANALYSIS", "ANALYST", "ANALYZE", "ANCIENT", "AND", "ANGER", "ANGLE", "ANGRY", "ANIMAL", "ANNIVERSARY", "ANNOUNCE", "ANNUAL", "ANOTHER", "ANSWER", "ANTICIPATE", "ANXIETY", "ANY", "ANYBODY", "ANYMORE", "ANYONE", "ANYTHING", "ANYWAY", "ANYWHERE", "APART", "APARTMENT", "APPARENT", "APPARENTLY", "APPEAL", "APPEAR", "APPEARANCE", "APPLE", "APPLICATION", "APPLY", "APPOINT", "APPOINTMENT", "APPRECIATE", "APPROACH", "APPROPRIATE", "APPROVAL", "APPROVE", "APPROXIMATELY", "ARCHITECT", "AREA", "ARGUE", "ARGUMENT", "ARISE", "ARM", "ARMED", "ARMY", "AROUND", "ARRANGE", "ARRANGEMENT", "ARREST", "ARRIVAL", "ARRIVE", "ART", "ARTICLE", "ARTIST", "ARTISTIC", "ASIDE", "ASK", "ASLEEP", "ASPECT", "ASSAULT", "ASSERT", "ASSESS", "ASSESSMENT", "ASSET", "ASSIGN", "ASSIGNMENT", "ASSIST", "ASSISTANCE", "ASSISTANT", "ASSOCIATE", "ASSOCIATION", "ASSUME", "ASSUMPTION", "ASSURE", "ATHLETE", "ATHLETIC", "ATMOSPHERE", "ATTACH", "ATTACK", "ATTEMPT", "ATTEND", "ATTENTION", "ATTITUDE", "ATTORNEY", "ATTRACT", "ATTRACTIVE", "ATTRIBUTE", "AUDIENCE", "AUTHOR", "AUTHORITY", "AUTO", "AVAILABLE", "AVERAGE", "AVOID", "AWARD", "AWARE", "AWARENESS", "AWAY", "AWFUL", "BABY", "BACK", "BACKGROUND", "BAD", "BADLY", "BAG", "BAKE", "BALANCE", "BALL", "BAN", "BAND", "BANK", "BAR", "BARELY", "BARREL", "BARRIER", "BASE", "BASEBALL", "BASIC", "BASICALLY", "BASIS", "BASKET", "BASKETBALL", "BATHROOM", "BATTERY", "BATTLE", "BE", "BEACH", "BEAN", "BEAR", "BEAT", "BEAUTIFUL", "BEAUTY", "BECAUSE", "BECOME", "BED", "BEDROOM", "BEER", "BEFORE", "BEGIN", "BEGINNING", "BEHAVIOR", "BEHIND", "BEING", "BELIEF", "BELIEVE", "BELL", "BELONG", "BELOW", "BELT", "BENCH", "BEND", "BENEATH", "BENEFIT", "BESIDE", "BESIDES", "BEST", "BET", "BETTER", "BETWEEN", "BEYOND", "BIBLE", "BIG", "BIKE", "BILL", "BILLION", "BIND", "BIOLOGICAL", "BIRD", "BIRTH", "BIRTHDAY", "BIT", "BITE", "BLACK", "BLADE", "BLAME", "BLANKET", "BLIND", "BLOCK", "BLOOD", "BLOW", "BLUE", "BOARD", "BOAT", "BODY", "BOMB", "BOMBING", "BOND", "BONE", "BOOK", "BOOM", "BOOT", "BORDER", "BORN", "BORROW", "BOSS", "BOTH", "BOTHER", "BOTTLE", "BOTTOM", "BOUNDARY", "BOWL", "BOX", "BOY", "BOYFRIEND", "BRAIN", "BRANCH", "BRAND", "BREAD", "BREAK", "BREAKFAST", "BREAST", "BREATH", "BREATHE", "BRICK", "BRIDGE", "BRIEF", "BRIEFLY", "BRIGHT", "BRILLIANT", "BRING", "BROAD", "BROKEN", "BROTHER", "BROWN", "BRUSH", "BUCK", "BUDGET", "BUILD", "BUILDING", "BULLET", "BUNCH", "BURDEN", "BURN", "BURY", "BUS", "BUSINESS", "BUSY", "BUT", "BUTTER", "BUTTON", "BUY", "BUYER", "CABIN", "CABINET", "CABLE", "CAKE", "CALCULATE", "CALL", "CAMERA", "CAMP", "CAMPAIGN", "CAMPUS", "CAN", "CANCER", "CANDIDATE", "CAP", "CAPABILITY", "CAPABLE", "CAPACITY", "CAPITAL", "CAPTAIN", "CAPTURE", "CAR", "CARBON", "CARD", "CARE", "CAREER", "CAREFUL", "CAREFULLY", "CARRIER", "CARRY", "CASE", "CASH", "CAST", "CAT", "CATCH", "CATEGORY", "CATHOLIC", "CAUSE", "CEILING", "CELEBRATE", "CELEBRATION", "CELEBRITY", "CELL", "CENTER", "CENTRAL", "CENTURY", "CEREMONY", "CERTAIN", "CERTAINLY", "CHAIN", "CHAIR", "CHAIRMAN", "CHALLENGE", "CHAMBER", "CHAMPION", "CHAMPIONSHIP", "CHANCE", "CHANGE", "CHANGING", "CHANNEL", "CHAPTER", "CHARACTER", "CHARACTERISTIC", "CHARACTERIZE", "CHARGE", "CHARITY", "CHART", "CHASE", "CHEAP", "CHECK", "CHEEK", "CHEESE", "CHEF", "CHEMICAL", "CHEST", "CHICKEN", "CHIEF", "CHILD", "CHILDHOOD", "CHINESE", "CHIP", "CHOCOLATE", "CHOICE", "CHOLESTEROL", "CHOOSE", "CHRISTIAN", "CHRISTMAS", "CHURCH", "CIGARETTE", "CIRCLE", "CIRCUMSTANCE", "CITE", "CITIZEN", "CITY", "CIVIL", "CIVILIAN", "CLAIM", "CLASS", "CLASSIC", "CLASSROOM", "CLEAN", "CLEAR", "CLEARLY", "CLIENT", "CLIMATE", "CLIMB", "CLINIC", "CLINICAL", "CLOCK", "CLOSE", "CLOSELY", "CLOSER", "CLOTHES", "CLOTHING", "CLOUD", "CLUB", "CLUE", "CLUSTER", "COACH", "COAL", "COALITION", "COAST", "COAT", "CODE", "COFFEE", "COGNITIVE", "COLD", "COLLAPSE", "COLLEAGUE", "COLLECT", "COLLECTION", "COLLECTIVE", "COLLEGE", "COLONIAL", "COLOR", "COLUMN", "COMBINATION", "COMBINE", "COME", "COMEDY", "COMFORT", "COMFORTABLE", "COMMAND", "COMMANDER", "COMMENT", "COMMERCIAL", "COMMISSION", "COMMIT", "COMMITMENT", "COMMITTEE", "COMMON", "COMMUNICATE", "COMMUNICATION", "COMMUNITY", "COMPANY", "COMPARE", "COMPARISON", "COMPETE", "COMPETITION", "COMPETITIVE", "COMPETITOR", "COMPLAIN", "COMPLAINT", "COMPLETE", "COMPLETELY", "COMPLEX", "COMPLICATED", "COMPONENT", "COMPOSE", "COMPOSITION", "COMPREHENSIVE", "COMPUTER", "CONCENTRATE", "CONCENTRATION", "CONCEPT", "CONCERN", "CONCERNED", "CONCERT", "CONCLUDE", "CONCLUSION", "CONCRETE", "CONDITION", "CONDUCT", "CONFERENCE", "CONFIDENCE", "CONFIDENT", "CONFIRM", "CONFLICT", "CONFRONT", "CONFUSION", "CONGRESS", "CONGRESSIONAL", "CONNECT", "CONNECTION", "CONSCIOUSNESS", "CONSENSUS", "CONSEQUENCE", "CONSERVATIVE", "CONSIDER", "CONSIDERABLE", "CONSIDERATION", "CONSIST", "CONSISTENT", "CONSTANT", "CONSTANTLY", "CONSTITUTE", "CONSTITUTIONAL", "CONSTRUCT", "CONSTRUCTION", "CONSULTANT", "CONSUME", "CONSUMER", "CONSUMPTION", "CONTACT", "CONTAIN", "CONTAINER", "CONTEMPORARY", "CONTENT", "CONTEST", "CONTEXT", "CONTINUE", "CONTINUED", "CONTRACT", "CONTRAST", "CONTRIBUTE", "CONTRIBUTION", "CONTROL", "CONTROVERSIAL", "CONTROVERSY", "CONVENTION", "CONVENTIONAL", "CONVERSATION", "CONVERT", "CONVICTION", "CONVINCE", "COOK", "COOKIE", "COOKING", "COOL", "COOPERATION", "COP", "COPE", "COPY", "CORE", "CORN", "CORNER", "CORPORATE", "CORPORATION", "CORRECT", "CORRESPONDENT", "COST", "COTTON", "COUCH", "COULD", "COUNCIL", "COUNSELOR", "COUNT", "COUNTER", "COUNTRY", "COUNTY", "COUPLE", "COURAGE", "COURSE", "COURT", "COUSIN", "COVER", "COVERAGE", "COW", "CRACK", "CRAFT", "CRASH", "CRAZY", "CREAM", "CREATE", "CREATION", "CREATIVE", "CREATURE", "CREDIT", "CREW", "CRIME", "CRIMINAL", "CRISIS", "CRITERIA", "CRITIC", "CRITICAL", "CRITICISM", "CRITICIZE", "CROP", "CROSS", "CROWD", "CRUCIAL", "CRY", "CULTURAL", "CULTURE", "CUP", "CURIOUS", "CURRENT", "CURRENTLY", "CURRICULUM", "CUSTOM", "CUSTOMER", "CUT", "CYCLE", "DAD", "DAILY", "DAMAGE", "DANCE", "DANGER", "DANGEROUS", "DARE", "DARK", "DARKNESS", "DATA", "DATE", "DAUGHTER", "DAY", "DEAD", "DEAL", "DEALER", "DEAR", "DEATH", "DEBATE", "DEBT", "DECADE", "DECIDE", "DECISION", "DECK", "DECLARE", "DECLINE", "DECREASE", "DEEP", "DEEPLY", "DEER", "DEFEAT", "DEFEND", "DEFENDANT", "DEFENSE", "DEFENSIVE", "DEFICIT", "DEFINE", "DEFINITELY", "DEFINITION", "DEGREE", "DELAY", "DELIVER", "DELIVERY", "DEMAND", "DEMOCRACY", "DEMOCRAT", "DEMOCRATIC", "DEMONSTRATE", "DEMONSTRATION", "DENY", "DEPARTMENT", "DEPEND", "DEPENDENT", "DEPENDING", "DEPICT", "DEPRESSION", "DEPTH", "DEPUTY", "DERIVE", "DESCRIBE", "DESCRIPTION", "DESERT", "DESERVE", "DESIGN", "DESIGNER", "DESIRE", "DESK", "DESPERATE", "DESPITE", "DESTROY", "DESTRUCTION", "DETAIL", "DETAILED", "DETECT", "DETERMINE", "DEVELOP", "DEVELOPING", "DEVELOPMENT", "DEVICE", "DEVOTE", "DIALOGUE", "DIE", "DIET", "DIFFER", "DIFFERENCE", "DIFFERENT", "DIFFERENTLY", "DIFFICULT", "DIFFICULTY", "DIG", "DIGITAL", "DIMENSION", "DINING", "DINNER", "DIRECT", "DIRECTION", "DIRECTLY", "DIRECTOR", "DIRT", "DIRTY", "DISABILITY", "DISAGREE", "DISAPPEAR", "DISASTER", "DISCIPLINE", "DISCOURSE", "DISCOVER", "DISCOVERY", "DISCRIMINATION", "DISCUSS", "DISCUSSION", "DISEASE", "DISH", "DISMISS", "DISORDER", "DISPLAY", "DISPUTE", "DISTANCE", "DISTANT", "DISTINCT", "DISTINCTION", "DISTINGUISH", "DISTRIBUTE", "DISTRIBUTION", "DISTRICT", "DIVERSE", "DIVERSITY", "DIVIDE", "DIVISION", "DIVORCE", "DO", "DOCTOR", "DOCUMENT", "DOG", "DOMESTIC", "DOMINANT", "DOMINATE", "DOOR", "DOUBLE", "DOUBT", "DOWN", "DOWNTOWN", "DOZEN", "DRAFT", "DRAG", "DRAMA", "DRAMATIC", "DRAMATICALLY", "DRAW", "DRAWING", "DREAM", "DRESS", "DRINK", "DRIVE", "DRIVER", "DROP", "DRUG", "DRY", "DUE", "DURING", "DUST", "DUTY", "EACH", "EAGER", "EAR", "EARLY", "EARN", "EARNINGS", "EARTH", "EASE", "EASILY", "EAST", "EASTERN", "EASY", "EAT", "ECONOMIC", "ECONOMICS", "ECONOMIST", "ECONOMY", "EDGE", "EDITION", "EDITOR", "EDUCATE", "EDUCATION", "EDUCATIONAL", "EDUCATOR", "EFFECT", "EFFECTIVE", "EFFECTIVELY", "EFFICIENCY", "EFFICIENT", "EFFORT", "EGG", "EIGHT", "EITHER", "ELDERLY", "ELECT", "ELECTION", "ELECTRIC", "ELECTRICITY", "ELECTRONIC", "ELEMENT", "ELEMENTARY", "ELIMINATE", "ELITE", "ELSE", "ELSEWHERE", "EMBRACE", "EMERGE", "EMERGENCY", "EMISSION", "EMOTION", "EMOTIONAL", "EMPHASIS", "EMPHASIZE", "EMPLOY", "EMPLOYEE", "EMPLOYER", "EMPLOYMENT", "EMPTY", "ENABLE", "ENCOUNTER", "ENCOURAGE", "END", "ENEMY", "ENERGY", "ENFORCEMENT", "ENGAGE", "ENGINE", "ENGINEER", "ENGINEERING", "ENHANCE", "ENJOY", "ENORMOUS", "ENOUGH", "ENSURE", "ENTER", "ENTERPRISE", "ENTERTAINMENT", "ENTIRE", "ENTIRELY", "ENTRANCE", "ENTRY", "ENVIRONMENT", "ENVIRONMENTAL", "EPISODE", "EQUAL", "EQUALLY", "EQUIPMENT", "ERA", "ERROR", "ESCAPE", "ESPECIALLY", "ESSAY", "ESSENTIAL", "ESSENTIALLY", "ESTABLISH", "ESTABLISHMENT", "ESTATE", "ESTIMATE", "ETHICS", "ETHNIC", "EVALUATE", "EVALUATION", "EVEN", "EVENING", "EVENT", "EVENTUALLY", "EVER", "EVERY", "EVERYBODY", "EVERYDAY", "EVERYONE", "EVERYTHING", "EVERYWHERE", "EVIDENCE", "EVOLUTION", "EVOLVE", "EXACT", "EXACTLY", "EXAMINATION", "EXAMINE", "EXAMPLE", "EXCEED", "EXCELLENT", "EXCEPT", "EXCEPTION", "EXCHANGE", "EXCITING", "EXECUTIVE", "EXERCISE", "EXHIBIT", "EXHIBITION", "EXIST", "EXISTENCE", "EXISTING", "EXPAND", "EXPANSION", "EXPECT", "EXPECTATION", "EXPENSE", "EXPENSIVE", "EXPERIENCE", "EXPERIMENT", "EXPERT", "EXPLAIN", "EXPLANATION", "EXPLODE", "EXPLORE", "EXPLOSION", "EXPOSE", "EXPOSURE", "EXPRESS", "EXPRESSION", "EXTEND", "EXTENSION", "EXTENSIVE", "EXTENT", "EXTERNAL", "EXTRA", "EXTRAORDINARY", "EXTREME", "EXTREMELY", "EYE", "FABRIC", "FACE", "FACILITY", "FACT", "FACTOR", "FACTORY", "FACULTY", "FADE", "FAIL", "FAILURE", "FAIR", "FAIRLY", "FAITH", "FALL", "FALSE", "FAMILIAR", "FAMILY", "FAMOUS", "FAN", "FANTASY", "FAR", "FARM", "FARMER", "FASHION", "FAST", "FAT", "FATE", "FATHER", "FAULT", "FAVOR", "FAVORITE", "FEAR", "FEATURE", "FEDERAL", "FEE", "FEED", "FEEL", "FEELING", "FELLOW", "FEMALE", "FENCE", "FEW", "FEWER", "FIBER", "FICTION", "FIELD", "FIFTEEN", "FIFTH", "FIFTY", "FIGHT", "FIGHTER", "FIGHTING", "FIGURE", "FILE", "FILL", "FILM", "FINAL", "FINALLY", "FINANCE", "FINANCIAL", "FIND", "FINDING", "FINE", "FINGER", "FINISH", "FIRE", "FIRM", "FIRST", "FISH", "FISHING", "FIT", "FITNESS", "FIVE", "FIX", "FLAG", "FLAME", "FLAT", "FLAVOR", "FLEE", "FLESH", "FLIGHT", "FLOAT", "FLOOR", "FLOW", "FLOWER", "FLY", "FOCUS", "FOLK", "FOLLOW", "FOLLOWING", "FOOD", "FOOT", "FOOTBALL", "FORCE", "FOREIGN", "FOREST", "FOREVER", "FORGET", "FORM", "FORMAL", "FORMATION", "FORMER", "FORMULA", "FORTH", "FORTUNE", "FORWARD", "FOUND", "FOUNDATION", "FOUNDER", "FOUR", "FOURTH", "FRAME", "FRAMEWORK", "FREE", "FREEDOM", "FREEZE", "FREQUENCY", "FREQUENT", "FREQUENTLY", "FRESH", "FRIEND", "FRIENDLY", "FRIENDSHIP", "FRONT", "FRUIT", "FRUSTRATION", "FUEL", "FULL", "FULLY", "FUN", "FUNCTION", "FUND", "FUNDAMENTAL", "FUNDING", "FUNERAL", "FUNNY", "FURNITURE", "FURTHERMORE", "FUTURE", "GAIN", "GALAXY", "GALLERY", "GAME", "GANG", "GAP", "GARAGE", "GARDEN", "GARLIC", "GAS", "GATE", "GATHER", "GAZE", "GEAR", "GENDER", "GENE", "GENERAL", "GENERALLY", "GENERATE", "GENERATION", "GENETIC", "GENTLEMAN", "GENTLY", "GERMAN", "GESTURE", "GET", "GHOST", "GIANT", "GIFT", "GIFTED", "GIRL", "GIRLFRIEND", "GIVE", "GIVEN", "GLAD", "GLANCE", "GLASS", "GLOBAL", "GLOVE", "GO", "GOAL", "GOD", "GOLD", "GOLDEN", "GOLF", "GOOD", "GOVERNMENT", "GOVERNOR", "GRAB", "GRADE", "GRADUALLY", "GRADUATE", "GRAIN", "GRAND", "GRANDFATHER", "GRANDMOTHER", "GRANT", "GRASS", "GRAVE", "GRAY", "GREAT", "GREATEST", "GREEN", "GROCERY", "GROUND", "GROUP", "GROW", "GROWING", "GROWTH", "GUARANTEE", "GUARD", "GUESS", "GUEST", "GUIDE", "GUIDELINE", "GUILTY", "GUN", "GUY", "HABIT", "HABITAT", "HAIR", "HALF", "HALL", "HAND", "HANDFUL", "HANDLE", "HANG", "HAPPEN", "HAPPY", "HARD", "HARDLY", "HAT", "HATE", "HAVE", "HE", "HEAD", "HEADLINE", "HEADQUARTERS", "HEALTH", "HEALTHY", "HEAR", "HEARING", "HEART", "HEAT", "HEAVEN", "HEAVILY", "HEAVY", "HEEL", "HEIGHT", "HELICOPTER", "HELL", "HELLO", "HELP", "HELPFUL", "HERE", "HERITAGE", "HERO", "HEY", "HIDE", "HIGH", "HIGHLIGHT", "HIGHLY", "HIGHWAY", "HILL", "HIP", "HIRE", "HISTORIAN", "HISTORIC", "HISTORICAL", "HISTORY", "HIT", "HOLD", "HOLE", "HOLIDAY", "HOLY", "HOME", "HOMELESS", "HONEST", "HONEY", "HONOR", "HOPE", "HORIZON", "HORROR", "HORSE", "HOSPITAL", "HOST", "HOT", "HOTEL", "HOUR", "HOUSE", "HOUSEHOLD", "HOUSING", "HOWEVER", "HUGE", "HUMAN", "HUMOR", "HUNDRED", "HUNGRY", "HUNTER", "HUNTING", "HURT", "HUSBAND", "HYPOTHESIS", "ICE", "IDEA", "IDEAL", "IDENTIFICATION", "IDENTIFY", "IDENTITY", "IGNORE", "ILL", "ILLEGAL", "ILLNESS", "ILLUSTRATE", "IMAGE", "IMAGINATION", "IMAGINE", "IMMEDIATE", "IMMEDIATELY", "IMMIGRANT", "IMMIGRATION", "IMPACT", "IMPLEMENT", "IMPLICATION", "IMPLY", "IMPORTANCE", "IMPORTANT", "IMPOSE", "IMPOSSIBLE", "IMPRESS", "IMPRESSION", "IMPRESSIVE", "IMPROVE", "IMPROVEMENT", "INCENTIVE", "INCIDENT", "INCLUDE", "INCLUDING", "INCOME", "INCORPORATE", "INCREASE", "INCREASED", "INCREASING", "INCREASINGLY", "INCREDIBLE", "INDEED", "INDEPENDENCE", "INDEPENDENT", "INDEX", "INDIAN", "INDICATE", "INDICATION", "INDIVIDUAL", "INDUSTRIAL", "INDUSTRY", "INFANT", "INFECTION", "INFLATION", "INFLUENCE", "INFORM", "INFORMATION", "INGREDIENT", "INITIAL", "INITIALLY", "INITIATIVE", "INJURY", "INNER", "INNOCENT", "INQUIRY", "INSIDE", "INSIGHT", "INSIST", "INSPIRE", "INSTALL", "INSTANCE", "INSTEAD", "INSTITUTION", "INSTITUTIONAL", "INSTRUCTION", "INSTRUCTOR", "INSTRUMENT", "INSURANCE", "INTELLECTUAL", "INTELLIGENCE", "INTEND", "INTENSE", "INTENSITY", "INTENTION", "INTERACTION", "INTEREST", "INTERESTED", "INTERESTING", "INTERNAL", "INTERNATIONAL", "INTERNET", "INTERPRET", "INTERPRETATION", "INTERVENTION", "INTERVIEW", "INTRODUCE", "INTRODUCTION", "INVASION", "INVEST", "INVESTIGATE", "INVESTIGATION", "INVESTIGATOR", "INVESTMENT", "INVESTOR", "INVITE", "INVOLVE", "INVOLVED", "INVOLVEMENT", "IRON", "ISLAND", "ISSUE", "IT", "ITEM", "JACKET", "JAIL", "JET", "JEW", "JEWISH", "JOB", "JOIN", "JOINT", "JOKE", "JOURNAL", "JOURNALIST", "JOURNEY", "JOY", "JUDGE", "JUDGMENT", "JUICE", "JUMP", "JUNIOR", "JURY", "JUST", "JUSTICE", "JUSTIFY", "KEEP", "KEY", "KICK", "KID", "KILL", "KILLER", "KILLING", "KIND", "KING", "KISS", "KITCHEN", "KNEE", "KNIFE", "KNOCK", "KNOW", "KNOWLEDGE", "LAB", "LABEL", "LABOR", "LABORATORY", "LACK", "LADY", "LAKE", "LAND", "LANDSCAPE", "LANGUAGE", "LAP", "LARGE", "LARGELY", "LAST", "LATE", "LATER", "LATIN", "LATTER", "LAUGH", "LAUNCH", "LAW", "LAWN", "LAWSUIT", "LAWYER", "LAY", "LAYER", "LEAD", "LEADER", "LEADERSHIP", "LEADING", "LEAF", "LEAGUE", "LEAN", "LEARN", "LEARNING", "LEAST", "LEATHER", "LEAVE", "LEFT", "LEG", "LEGACY", "LEGAL", "LEGEND", "LEGISLATION", "LEGITIMATE", "LEMON", "LENGTH", "LESS", "LESSON", "LET", "LETTER", "LEVEL", "LIBERAL", "LIBRARY", "LICENSE", "LIE", "LIFE", "LIFESTYLE", "LIFETIME", "LIFT", "LIGHT", "LIKE", "LIKELY", "LIMIT", "LIMITATION", "LIMITED", "LINE", "LINK", "LIP", "LIST", "LISTEN", "LITERALLY", "LITERARY", "LITERATURE", "LITTLE", "LIVE", "LIVING", "LOAD", "LOAN", "LOCAL", "LOCATE", "LOCATION", "LOCK", "LONG", "LOOK", "LOOSE", "LOSE", "LOSS", "LOST", "LOT", "LOTS", "LOUD", "LOVE", "LOVELY", "LOVER", "LOW", "LOWER", "LUCK", "LUCKY", "LUNCH", "LUNG", "MACHINE", "MAD", "MAGAZINE", "MAIL", "MAIN", "MAINLY", "MAINTAIN", "MAINTENANCE", "MAJOR", "MAJORITY", "MAKE", "MAKER", "MAKEUP", "MALE", "MALL", "MAN", "MANAGE", "MANAGEMENT", "MANAGER", "MANNER", "MANUFACTURER", "MANUFACTURING", "MANY", "MAP", "MARGIN", "MARK", "MARKET", "MARKETING", "MARRIAGE", "MARRIED", "MARRY", "MASK", "MASS", "MASSIVE", "MASTER", "MATCH", "MATERIAL", "MATH", "MATTER", "MAY", "MAYBE", "MAYOR", "MEAL", "MEAN", "MEANING", "MEANWHILE", "MEASURE", "MEASUREMENT", "MEAT", "MECHANISM", "MEDIA", "MEDICAL", "MEDICATION", "MEDICINE", "MEDIUM", "MEET", "MEETING", "MEMBER", "MEMBERSHIP", "MEMORY", "MENTAL", "MENTION", "MENU", "MERE", "MERELY", "MESS", "MESSAGE", "METAL", "METER", "METHOD", "MIDDLE", "MIGHT", "MILITARY", "MILK", "MILLION", "MIND", "MINE", "MINISTER", "MINOR", "MINORITY", "MINUTE", "MIRACLE", "MIRROR", "MISS", "MISSILE", "MISSION", "MISTAKE", "MIX", "MIXTURE", "MODE", "MODEL", "MODERATE", "MODERN", "MODEST", "MOM", "MOMENT", "MONEY", "MONITOR", "MONTH", "MOOD", "MOON", "MORAL", "MORE", "MOREOVER", "MORNING", "MORTGAGE", "MOST", "MOSTLY", "MOTHER", "MOTION", "MOTIVATION", "MOTOR", "MOUNT", "MOUNTAIN", "MOUSE", "MOUTH", "MOVE", "MOVEMENT", "MOVIE", "MUCH", "MULTIPLE", "MURDER", "MUSCLE", "MUSEUM", "MUSIC", "MUSICAL", "MUSICIAN", "MUST", "MUTUAL", "MYSTERY", "MYTH", "NAKED", "NAME", "NARRATIVE", "NARROW", "NATION", "NATIONAL", "NATIVE", "NATURAL", "NATURALLY", "NATURE", "NEAR", "NEARBY", "NEARLY", "NECESSARILY", "NECESSARY", "NECK", "NEED", "NEGATIVE", "NEGOTIATE", "NEGOTIATION", "NEIGHBOR", "NEIGHBORHOOD", "NEITHER", "NERVE", "NERVOUS", "NET", "NETWORK", "NEVER", "NEVERTHELESS", "NEW", "NEWLY", "NEWS", "NEWSPAPER", "NEXT", "NICE", "NIGHT", "NINE", "NOBODY", "NOD", "NOISE", "NOMINATION", "NONE", "NONETHELESS", "NORMAL", "NORMALLY", "NORTH", "NORTHERN", "NOSE", "NOTE", "NOTHING", "NOTICE", "NOTION", "NOVEL", "NOW", "NOWHERE", "NUCLEAR", "NUMBER", "NUMEROUS", "NURSE", "NUT", "OBJECT", "OBJECTIVE", "OBLIGATION", "OBSERVATION", "OBSERVE", "OBSERVER", "OBTAIN", "OBVIOUS", "OBVIOUSLY", "OCCASION", "OCCASIONALLY", "OCCUPATION", "OCCUPY", "OCCUR", "OCEAN", "ODD", "ODDS", "OFFENSE", "OFFENSIVE", "OFFER", "OFFICE", "OFFICER", "OFFICIAL", "OFTEN", "OIL", "OKAY", "OLD", "OLYMPIC", "ONCE", "ONE", "ONGOING", "ONION", "ONLINE", "ONLY", "OPEN", "OPENING", "OPERATE", "OPERATING", "OPERATION", "OPERATOR", "OPINION", "OPPONENT", "OPPORTUNITY", "OPPOSE", "OPPOSITE", "OPPOSITION", "OPTION", "ORANGE", "ORDER", "ORDINARY", "ORGANIC", "ORGANIZATION", "ORGANIZE", "ORIENTATION", "ORIGIN", "ORIGINAL", "ORIGINALLY", "OTHER", "OTHERS", "OTHERWISE", "OUGHT", "OURSELVES", "OUTCOME", "OUTSIDE", "OVEN", "OVER", "OVERALL", "OVERCOME", "OVERLOOK", "OWE", "OWN", "OWNER", "PACE", "PACK", "PACKAGE", "PAGE", "PAIN", "PAINFUL", "PAINT", "PAINTER", "PAINTING", "PAIR", "PALE", "PALM", "PAN", "PANEL", "PANT", "PAPER", "PARENT", "PARK", "PARKING", "PART", "PARTICIPANT", "PARTICIPATE", "PARTICIPATION", "PARTICULAR", "PARTICULARLY", "PARTLY", "PARTNER", "PARTNERSHIP", "PARTY", "PASS", "PASSAGE", "PASSENGER", "PASSION", "PAST", "PATCH", "PATH", "PATIENT", "PATTERN", "PAUSE", "PAY", "PAYMENT", "PEACE", "PEAK", "PEER", "PENALTY", "PEOPLE", "PEPPER", "PERCEIVE", "PERCENTAGE", "PERCEPTION", "PERFECT", "PERFECTLY", "PERFORM", "PERFORMANCE", "PERHAPS", "PERIOD", "PERMANENT", "PERMISSION", "PERMIT", "PERSON", "PERSONAL", "PERSONALITY", "PERSONALLY", "PERSONNEL", "PERSPECTIVE", "PERSUADE", "PET", "PHASE", "PHENOMENON", "PHILOSOPHY", "PHONE", "PHOTO", "PHOTOGRAPH", "PHOTOGRAPHER", "PHRASE", "PHYSICAL", "PHYSICALLY", "PHYSICIAN", "PIANO", "PICK", "PICTURE", "PIE", "PIECE", "PILE", "PILOT", "PINE", "PINK", "PIPE", "PITCH", "PLACE", "PLAN", "PLANE", "PLANET", "PLANNING", "PLANT", "PLASTIC", "PLATE", "PLATFORM", "PLAY", "PLAYER", "PLEASE", "PLEASURE", "PLENTY", "PLOT", "PLUS", "POCKET", "POEM", "POET", "POETRY", "POINT", "POLE", "POLICE", "POLICY", "POLITICAL", "POLITICALLY", "POLITICIAN", "POLITICS", "POLL", "POLLUTION", "POOL", "POOR", "POP", "POPULAR", "POPULATION", "PORCH", "PORT", "PORTION", "PORTRAIT", "PORTRAY", "POSE", "POSITION", "POSITIVE", "POSSESS", "POSSIBILITY", "POSSIBLE", "POSSIBLY", "POST", "POT", "POTATO", "POTENTIAL", "POTENTIALLY", "POUND", "POUR", "POVERTY", "POWDER", "POWER", "POWERFUL", "PRACTICAL", "PRACTICE", "PRAY", "PRAYER", "PRECISELY", "PREDICT", "PREFER", "PREFERENCE", "PREGNANCY", "PREGNANT", "PREPARATION", "PREPARE", "PRESCRIPTION", "PRESENCE", "PRESENT", "PRESENTATION", "PRESERVE", "PRESIDENT", "PRESIDENTIAL", "PRESS", "PRESSURE", "PRETEND", "PRETTY", "PREVENT", "PREVIOUS", "PREVIOUSLY", "PRICE", "PRIDE", "PRIEST", "PRIMARILY", "PRIMARY", "PRIME", "PRINCIPAL", "PRINCIPLE", "PRINT", "PRIOR", "PRIORITY", "PRISON", "PRISONER", "PRIVACY", "PRIVATE", "PROBABLY", "PROBLEM", "PROCEDURE", "PROCEED", "PROCESS", "PRODUCE", "PRODUCER", "PRODUCT", "PRODUCTION", "PROFESSION", "PROFESSIONAL", "PROFESSOR", "PROFILE", "PROFIT", "PROGRAM", "PROGRESS", "PROJECT", "PROMINENT", "PROMISE", "PROMOTE", "PROMPT", "PROOF", "PROPER", "PROPERLY", "PROPERTY", "PROPORTION", "PROPOSAL", "PROPOSE", "PROPOSED", "PROSECUTOR", "PROSPECT", "PROTECT", "PROTECTION", "PROTEIN", "PROTEST", "PROUD", "PROVE", "PROVIDE", "PROVIDER", "PROVINCE", "PROVISION", "PSYCHOLOGICAL", "PSYCHOLOGIST", "PSYCHOLOGY", "PUBLIC", "PUBLICATION", "PUBLICLY", "PUBLISH", "PUBLISHER", "PULL", "PUNISHMENT", "PURCHASE", "PURE", "PURPOSE", "PURSUE", "PUSH", "PUT", "QUALIFY", "QUALITY", "QUARTER", "QUARTERBACK", "QUESTION", "QUICK", "QUICKLY", "QUIET", "QUIETLY", "QUIT", "QUITE", "QUOTE", "RACE", "RACIAL", "RADICAL", "RADIO", "RAIL", "RAIN", "RAISE", "RANGE", "RANK", "RAPID", "RAPIDLY", "RARE", "RARELY", "RATE", "RATHER", "RATING", "RATIO", "RAW", "REACH", "REACT", "REACTION", "READ", "READER", "READING", "READY", "REAL", "REALITY", "REALIZE", "REALLY", "REASON", "REASONABLE", "RECALL", "RECEIVE", "RECENT", "RECENTLY", "RECIPE", "RECOGNITION", "RECOGNIZE", "RECOMMEND", "RECOMMENDATION", "RECORD", "RECORDING", "RECOVER", "RECOVERY", "RECRUIT", "RED", "REDUCE", "REDUCTION", "REFER", "REFERENCE", "REFLECT", "REFLECTION", "REFORM", "REFUGEE", "REFUSE", "REGARD", "REGARDING", "REGARDLESS", "REGIME", "REGION", "REGIONAL", "REGISTER", "REGULAR", "REGULARLY", "REGULATE", "REGULATION", "REINFORCE", "REJECT", "RELATE", "RELATION", "RELATIONSHIP", "RELATIVE", "RELATIVELY", "RELAX", "RELEASE", "RELEVANT", "RELIEF", "RELIGION", "RELIGIOUS", "RELY", "REMAIN", "REMAINING", "REMARKABLE", "REMEMBER", "REMIND", "REMOTE", "REMOVE", "REPEAT", "REPEATEDLY", "REPLACE", "REPLY", "REPORT", "REPORTER", "REPRESENT", "REPRESENTATION", "REPRESENTATIVE", "REPUTATION", "REQUEST", "REQUIRE", "REQUIREMENT", "RESEARCH", "RESEARCHER", "RESEMBLE", "RESERVATION", "RESIDENT", "RESIST", "RESISTANCE", "RESOLUTION", "RESOLVE", "RESORT", "RESOURCE", "RESPECT", "RESPOND", "RESPONDENT", "RESPONSE", "RESPONSIBILITY", "RESPONSIBLE", "REST", "RESTAURANT", "RESTORE", "RESTRICTION", "RESULT", "RETAIN", "RETIRE", "RETIREMENT", "RETURN", "REVEAL", "REVENUE", "REVIEW", "REVOLUTION", "RHYTHM", "RICE", "RICH", "RID", "RIDE", "RIFLE", "RIGHT", "RING", "RISE", "RISK", "RIVER", "ROAD", "ROCK", "ROLE", "ROLL", "ROMANTIC", "ROOF", "ROOM", "ROOT", "ROPE", "ROSE", "ROUGH", "ROUGHLY", "ROUND", "ROUTE", "ROUTINE", "ROW", "RUB", "RULE", "RUN", "RUNNING", "RURAL", "RUSH", "SACRED", "SAD", "SAFE", "SAFETY", "SAKE", "SALAD", "SALARY", "SALE", "SALES", "SALT", "SAME", "SAMPLE", "SANCTION", "SAND", "SATELLITE", "SATISFACTION", "SATISFY", "SAUCE", "SAVE", "SAVING", "SAY", "SCALE", "SCANDAL", "SCARED", "SCENARIO", "SCENE", "SCHEDULE", "SCHEME", "SCHOLAR", "SCHOLARSHIP", "SCHOOL", "SCIENCE", "SCIENTIFIC", "SCIENTIST", "SCOPE", "SCORE", "SCREAM", "SCREEN", "SCRIPT", "SEA", "SEARCH", "SEASON", "SEAT", "SECOND", "SECRET", "SECRETARY", "SECTION", "SECTOR", "SECURE", "SECURITY", "SEE", "SEED", "SEEK", "SEEM", "SEGMENT", "SEIZE", "SELECT", "SELECTION", "SELF", "SELL", "SENATE", "SENATOR", "SEND", "SENIOR", "SENSE", "SENSITIVE", "SENTENCE", "SEPARATE", "SEQUENCE", "SERIES", "SERIOUS", "SERIOUSLY", "SERVE", "SERVICE", "SESSION", "SET", "SETTING", "SETTLE", "SETTLEMENT", "SEVEN", "SEVERAL", "SEVERE", "SEXUAL", "SHADE", "SHADOW", "SHAKE", "SHALL", "SHAPE", "SHARE", "SHARP", "SHE", "SHEET", "SHELF", "SHELL", "SHELTER", "SHIFT", "SHINE", "SHIP", "SHIRT", "SHIT", "SHOCK", "SHOE", "SHOOT", "SHOOTING", "SHOP", "SHOPPING", "SHORE", "SHORT", "SHORTLY", "SHOT", "SHOULD", "SHOULDER", "SHOUT", "SHOW", "SHOWER", "SHRUG", "SHUT", "SICK", "SIDE", "SIGH", "SIGHT", "SIGN", "SIGNAL", "SIGNIFICANCE", "SIGNIFICANT", "SIGNIFICANTLY", "SILENCE", "SILENT", "SILVER", "SIMILAR", "SIMILARLY", "SIMPLE", "SIMPLY", "SIN", "SINCE", "SING", "SINGER", "SINGLE", "SINK", "SIR", "SISTER", "SIT", "SITE", "SITUATION", "SIX", "SIZE", "SKI", "SKILL", "SKIN", "SKY", "SLAVE", "SLEEP", "SLICE", "SLIDE", "SLIGHT", "SLIGHTLY", "SLIP", "SLOW", "SLOWLY", "SMALL", "SMART", "SMELL", "SMILE", "SMOKE", "SMOOTH", "SNAP", "SNOW", "SOCCER", "SOCIAL", "SOCIETY", "SOFT", "SOFTWARE", "SOIL", "SOLAR", "SOLDIER", "SOLID", "SOLUTION", "SOLVE", "SOME", "SOMEBODY", "SOMEHOW", "SOMEONE", "SOMETHING", "SOMETIMES", "SOMEWHAT", "SOMEWHERE", "SON", "SONG", "SOON", "SOPHISTICATED", "SORRY", "SORT", "SOUL", "SOUND", "SOUP", "SOURCE", "SOUTH", "SOUTHERN", "SPACE", "SPEAK", "SPEAKER", "SPECIAL", "SPECIALIST", "SPECIES", "SPECIFIC", "SPECIFICALLY", "SPEECH", "SPEED", "SPEND", "SPENDING", "SPIN", "SPIRIT", "SPIRITUAL", "SPLIT", "SPOKESMAN", "SPORT", "SPOT", "SPREAD", "SPRING", "SQUARE", "SQUEEZE", "STABILITY", "STABLE", "STAFF", "STAGE", "STAIR", "STAKE", "STAND", "STANDARD", "STANDING", "STAR", "STARE", "START", "STATE", "STATEMENT", "STATION", "STATISTICS", "STATUS", "STAY", "STEADY", "STEAL", "STEEL", "STEP", "STICK", "STILL", "STIR", "STOCK", "STOMACH", "STONE", "STOP", "STORAGE", "STORE", "STORM", "STORY", "STRAIGHT", "STRANGE", "STRANGER", "STRATEGIC", "STRATEGY", "STREAM", "STREET", "STRENGTH", "STRENGTHEN", "STRESS", "STRETCH", "STRIKE", "STRING", "STRIP", "STROKE", "STRONG", "STRONGLY", "STRUCTURE", "STRUGGLE", "STUDENT", "STUDIO", "STUDY", "STUFF", "STUPID", "STYLE", "SUBJECT", "SUBMIT", "SUBSEQUENT", "SUBSTANCE", "SUBSTANTIAL", "SUCCEED", "SUCCESS", "SUCCESSFUL", "SUCCESSFULLY", "SUDDEN", "SUDDENLY", "SUE", "SUFFER", "SUFFICIENT", "SUGAR", "SUGGEST", "SUGGESTION", "SUICIDE", "SUIT", "SUMMER", "SUMMIT", "SUN", "SUPER", "SUPPLY", "SUPPORT", "SUPPORTER", "SUPPOSE", "SUPPOSED", "SUPREME", "SURE", "SURELY", "SURFACE", "SURGERY", "SURPRISE", "SURPRISED", "SURPRISING", "SURPRISINGLY", "SURROUND", "SURVEY", "SURVIVAL", "SURVIVE", "SURVIVOR", "SUSPECT", "SUSTAIN", "SWEAR", "SWEEP", "SWEET", "SWIM", "SWING", "SWITCH", "SYMBOL", "SYMPTOM", "SYSTEM", "TABLE", "TABLESPOON", "TACTIC", "TAIL", "TAKE", "TALE", "TALENT", "TALK", "TALL", "TANK", "TAP", "TAPE", "TARGET", "TASK", "TASTE", "TAX", "TAXPAYER", "TEA", "TEACH", "TEACHER", "TEACHING", "TEAM", "TEAR", "TEASPOON", "TECHNICAL", "TECHNIQUE", "TECHNOLOGY", "TEEN", "TEENAGER", "TELEPHONE", "TELESCOPE", "TELEVISION", "TELL", "TEMPERATURE", "TEMPORARY", "TEN", "TEND", "TENDENCY", "TENNIS", "TENSION", "TENT", "TERM", "TERMS", "TERRIBLE", "TERRITORY", "TERROR", "TERRORISM", "TERRORIST", "TEST", "TESTIFY", "TESTIMONY", "TESTING", "TEXT", "THANK", "THANKS", "THAT", "THEATER", "THEME", "THEORY", "THERAPY", "THEY", "THICK", "THIN", "THING", "THINK", "THINKING", "THIRD", "THIRTY", "THIS", "THOUGH", "THOUGHT", "THOUSAND", "THREAT", "THREATEN", "THREE", "THROAT", "THROUGH", "THROUGHOUT", "THROW", "THUS", "TICKET", "TIE", "TIGHT", "TIME", "TINY", "TIP", "TIRE", "TIRED", "TISSUE", "TITLE", "TOBACCO", "TODAY", "TOE", "TOGETHER", "TOMATO", "TOMORROW", "TONE", "TONGUE", "TONIGHT", "TOO", "TOOL", "TOOTH", "TOP", "TOPIC", "TOSS", "TOTAL", "TOTALLY", "TOUCH", "TOUGH", "TOUR", "TOURIST", "TOURNAMENT", "TOWARD", "TOWARDS", "TOWER", "TOWN", "TOY", "TRACE", "TRACK", "TRADE", "TRADITION", "TRADITIONAL", "TRAFFIC", "TRAGEDY", "TRAIL", "TRAIN", "TRAINING", "TRANSFER", "TRANSFORM", "TRANSFORMATION", "TRANSITION", "TRANSLATE", "TRANSPORTATION", "TRAVEL", "TREAT", "TREATMENT", "TREATY", "TREE", "TREMENDOUS", "TREND", "TRIAL", "TRIBE", "TRICK", "TRIP", "TROOP", "TROUBLE", "TRUCK", "TRUE", "TRULY", "TRUST", "TRUTH", "TRY", "TUBE", "TUNNEL", "TURN", "TWELVE", "TWENTY", "TWICE", "TWIN", "TWO", "TYPE", "TYPICAL", "TYPICALLY", "UGLY", "ULTIMATE", "ULTIMATELY", "UNABLE", "UNCLE", "UNDER", "UNDERGO", "UNDERSTAND", "UNDERSTANDING", "UNFORTUNATELY", "UNIFORM", "UNION", "UNIQUE", "UNIT", "UNIVERSAL", "UNIVERSE", "UNIVERSITY", "UNKNOWN", "UNLESS", "UNLIKE", "UNLIKELY", "UNTIL", "UNUSUAL", "UPPER", "URBAN", "URGE", "USE", "USED", "USEFUL", "USER", "USUAL", "USUALLY", "UTILITY", "VACATION", "VALLEY", "VALUABLE", "VALUE", "VARIABLE", "VARIATION", "VARIETY", "VARIOUS", "VARY", "VAST", "VEGETABLE", "VEHICLE", "VENTURE", "VERSION", "VERSUS", "VERY", "VESSEL", "VETERAN", "VIA", "VICTIM", "VICTORY", "VIDEO", "VIEW", "VIEWER", "VILLAGE", "VIOLATE", "VIOLATION", "VIOLENCE", "VIOLENT", "VIRTUALLY", "VIRTUE", "VIRUS", "VISIBLE", "VISION", "VISIT", "VISITOR", "VISUAL", "VITAL", "VOICE", "VOLUME", "VOLUNTEER", "VOTE", "VOTER", "VULNERABLE", "WAGE", "WAIT", "WAKE", "WALK", "WALL", "WANDER", "WANT", "WAR", "WARM", "WARN", "WARNING", "WASH", "WASTE", "WATCH", "WATER", "WAVE", "WAY", "WE", "WEAK", "WEALTH", "WEALTHY", "WEAPON", "WEAR", "WEATHER", "WEDDING", "WEEK", "WEEKEND", "WEEKLY", "WEIGH", "WEIGHT", "WELCOME", "WELFARE", "WELL", "WEST", "WESTERN", "WET", "WHAT", "WHATEVER", "WHEEL", "WHENEVER", "WHEREAS", "WHETHER", "WHICH", "WHILE", "WHISPER", "WHITE", "WHO", "WHOLE", "WIDE", "WIDELY", "WIDESPREAD", "WIFE", "WILD", "WILL", "WILLING", "WIN", "WIND", "WINDOW", "WINE", "WING", "WINNER", "WINTER", "WIPE", "WIRE", "WISDOM", "WISE", "WISH", "WITH", "WITHDRAW", "WITHIN", "WITHOUT", "WITNESS", "WOMAN", "WONDER", "WONDERFUL", "WOOD", "WOODEN", "WORD", "WORK", "WORKER", "WORKING", "WORKS", "WORKSHOP", "WORLD", "WORRIED", "WORRY", "WORTH", "WOULD", "WOUND", "WRAP", "WRITE", "WRITER", "WRITING", "WRONG", "YARD", "YEAH", "YEAR", "YELL", "YELLOW", "YESTERDAY", "YIELD", "YOU", "YOUNG", "YOUTH", "ZONE"
    };
    public static void setm(int m1){
        m=m1;
    }
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_computergame);
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < 7; j++) {
                do letp[i][j] = (char) ((int) (Math.random() * 26) + 'A');
                while (alf[letp[i][j] - 'A'] == 0);
                alf[letp[i][j] - 'A']--;
            }
        }
        btn=findViewById(R.id.button);
        btn.setOnClickListener(this);
        helper=findViewById(R.id.helper);
        helper.setOnClickListener(this);
        for (int w=0; w<15; w++) {
            for (int u = 0; u < 15; u++)
                p[w][u] = "";
        }
        p[7][7]=" ";
        s="Your letters: ";
        for (int z=0; z<7; z++)
            s=s+letp[0][z]+" ";
        for (int i=0; i<m; i++)
            sum[i]=0;
        turn=(TextView) findViewById(R.id.textView2);
        newgame=findViewById(R.id.newgame);
        newgame.setOnClickListener(this);
        btn1=findViewById(R.id.clet);
        btn1.setOnClickListener(this);
        confirm=findViewById(R.id.confirm);
        confirm.setOnClickListener(this);
        check=findViewById(R.id.check);
        check.setOnClickListener(this);
        clet=(EditText)findViewById(R.id.cletters);
        let=(TextView) findViewById(R.id.letters);
        let.setText(s);
        start=findViewById(R.id.start);
        start.setOnClickListener(this);
        wordcon=findViewById(R.id.confword);
        wordcon.setOnClickListener(this);
        enterword=(EditText) findViewById(R.id.wordent);
        point=(TextView) findViewById(R.id.textView);
        s="Player has "+sum[0]+" points   Computer has "+sum[1]+" points";
        point.setText(s);
        start.setVisibility(View.INVISIBLE);
        ed[0][0]=(EditText) findViewById(R.id.editText00);
        ed[0][1]=(EditText) findViewById(R.id.editText01);
        ed[0][2]=(EditText) findViewById(R.id.editText02);
        ed[0][3]=(EditText) findViewById(R.id.editText03);
        ed[0][4]=(EditText) findViewById(R.id.editText04);
        ed[0][5]=(EditText) findViewById(R.id.editText05);
        ed[0][6]=(EditText) findViewById(R.id.editText06);
        ed[0][7]=(EditText) findViewById(R.id.editText07);
        ed[0][8]=(EditText) findViewById(R.id.editText08);
        ed[0][9]=(EditText) findViewById(R.id.editText09);
        ed[0][10]=(EditText) findViewById(R.id.editText0A);
        ed[0][11]=(EditText) findViewById(R.id.editText0B);
        ed[0][12]=(EditText) findViewById(R.id.editText0C);
        ed[0][13]=(EditText) findViewById(R.id.editText0D);
        ed[0][14]=(EditText) findViewById(R.id.editText0E);
        ed[1][0]=(EditText) findViewById(R.id.editText10);
        ed[1][1]=(EditText) findViewById(R.id.editText11);
        ed[1][2]=(EditText) findViewById(R.id.editText12);
        ed[1][3]=(EditText) findViewById(R.id.editText13);
        ed[1][4]=(EditText) findViewById(R.id.editText14);
        ed[1][5]=(EditText) findViewById(R.id.editText15);
        ed[1][6]=(EditText) findViewById(R.id.editText16);
        ed[1][7]=(EditText) findViewById(R.id.editText17);
        ed[1][8]=(EditText) findViewById(R.id.editText18);
        ed[1][9]=(EditText) findViewById(R.id.editText19);
        ed[1][10]=(EditText) findViewById(R.id.editText1A);
        ed[1][11]=(EditText) findViewById(R.id.editText1B);
        ed[1][12]=(EditText) findViewById(R.id.editText1C);
        ed[1][13]=(EditText) findViewById(R.id.editText1D);
        ed[1][14]=(EditText) findViewById(R.id.editText1E);
        ed[2][0]=(EditText) findViewById(R.id.editText20);
        ed[2][1]=(EditText) findViewById(R.id.editText21);
        ed[2][2]=(EditText) findViewById(R.id.editText22);
        ed[2][3]=(EditText) findViewById(R.id.editText23);
        ed[2][4]=(EditText) findViewById(R.id.editText24);
        ed[2][5]=(EditText) findViewById(R.id.editText25);
        ed[2][6]=(EditText) findViewById(R.id.editText26);
        ed[2][7]=(EditText) findViewById(R.id.editText27);
        ed[2][8]=(EditText) findViewById(R.id.editText28);
        ed[2][9]=(EditText) findViewById(R.id.editText29);
        ed[2][10]=(EditText) findViewById(R.id.editText2A);
        ed[2][11]=(EditText) findViewById(R.id.editText2B);
        ed[2][12]=(EditText) findViewById(R.id.editText2C);
        ed[2][13]=(EditText) findViewById(R.id.editText2D);
        ed[2][14]=(EditText) findViewById(R.id.editText2E);
        ed[3][0]=(EditText) findViewById(R.id.editText30);
        ed[3][1]=(EditText) findViewById(R.id.editText31);
        ed[3][2]=(EditText) findViewById(R.id.editText32);
        ed[3][3]=(EditText) findViewById(R.id.editText33);
        ed[3][4]=(EditText) findViewById(R.id.editText34);
        ed[3][5]=(EditText) findViewById(R.id.editText35);
        ed[3][6]=(EditText) findViewById(R.id.editText36);
        ed[3][7]=(EditText) findViewById(R.id.editText37);
        ed[3][8]=(EditText) findViewById(R.id.editText38);
        ed[3][9]=(EditText) findViewById(R.id.editText39);
        ed[3][10]=(EditText) findViewById(R.id.editText3A);
        ed[3][11]=(EditText) findViewById(R.id.editText3B);
        ed[3][12]=(EditText) findViewById(R.id.editText3C);
        ed[3][13]=(EditText) findViewById(R.id.editText3D);
        ed[3][14]=(EditText) findViewById(R.id.editText3E);
        ed[4][0]=(EditText) findViewById(R.id.editText40);
        ed[4][1]=(EditText) findViewById(R.id.editText41);
        ed[4][2]=(EditText) findViewById(R.id.editText42);
        ed[4][3]=(EditText) findViewById(R.id.editText43);
        ed[4][4]=(EditText) findViewById(R.id.editText44);
        ed[4][5]=(EditText) findViewById(R.id.editText45);
        ed[4][6]=(EditText) findViewById(R.id.editText46);
        ed[4][7]=(EditText) findViewById(R.id.editText47);
        ed[4][8]=(EditText) findViewById(R.id.editText48);
        ed[4][9]=(EditText) findViewById(R.id.editText49);
        ed[4][10]=(EditText) findViewById(R.id.editText4A);
        ed[4][11]=(EditText) findViewById(R.id.editText4B);
        ed[4][12]=(EditText) findViewById(R.id.editText4C);
        ed[4][13]=(EditText) findViewById(R.id.editText4D);
        ed[4][14]=(EditText) findViewById(R.id.editText4E);
        ed[5][0]=(EditText) findViewById(R.id.editText50);
        ed[5][1]=(EditText) findViewById(R.id.editText51);
        ed[5][2]=(EditText) findViewById(R.id.editText52);
        ed[5][3]=(EditText) findViewById(R.id.editText53);
        ed[5][4]=(EditText) findViewById(R.id.editText54);
        ed[5][5]=(EditText) findViewById(R.id.editText55);
        ed[5][6]=(EditText) findViewById(R.id.editText56);
        ed[5][7]=(EditText) findViewById(R.id.editText57);
        ed[5][8]=(EditText) findViewById(R.id.editText58);
        ed[5][9]=(EditText) findViewById(R.id.editText59);
        ed[5][10]=(EditText) findViewById(R.id.editText5A);
        ed[5][11]=(EditText) findViewById(R.id.editText5B);
        ed[5][12]=(EditText) findViewById(R.id.editText5C);
        ed[5][13]=(EditText) findViewById(R.id.editText5D);
        ed[5][14]=(EditText) findViewById(R.id.editText5E);
        ed[6][0]=(EditText) findViewById(R.id.editText60);
        ed[6][1]=(EditText) findViewById(R.id.editText61);
        ed[6][2]=(EditText) findViewById(R.id.editText62);
        ed[6][3]=(EditText) findViewById(R.id.editText63);
        ed[6][4]=(EditText) findViewById(R.id.editText64);
        ed[6][5]=(EditText) findViewById(R.id.editText65);
        ed[6][6]=(EditText) findViewById(R.id.editText66);
        ed[6][7]=(EditText) findViewById(R.id.editText67);
        ed[6][8]=(EditText) findViewById(R.id.editText68);
        ed[6][9]=(EditText) findViewById(R.id.editText69);
        ed[6][10]=(EditText) findViewById(R.id.editText6A);
        ed[6][11]=(EditText) findViewById(R.id.editText6B);
        ed[6][12]=(EditText) findViewById(R.id.editText6C);
        ed[6][13]=(EditText) findViewById(R.id.editText6D);
        ed[6][14]=(EditText) findViewById(R.id.editText6E);
        ed[7][0]=(EditText) findViewById(R.id.editText70);
        ed[7][1]=(EditText) findViewById(R.id.editText71);
        ed[7][2]=(EditText) findViewById(R.id.editText72);
        ed[7][3]=(EditText) findViewById(R.id.editText73);
        ed[7][4]=(EditText) findViewById(R.id.editText74);
        ed[7][5]=(EditText) findViewById(R.id.editText75);
        ed[7][6]=(EditText) findViewById(R.id.editText76);
        ed[7][7]=(EditText) findViewById(R.id.editText77);
        ed[7][8]=(EditText) findViewById(R.id.editText78);
        ed[7][9]=(EditText) findViewById(R.id.editText79);
        ed[7][10]=(EditText) findViewById(R.id.editText7A);
        ed[7][11]=(EditText) findViewById(R.id.editText7B);
        ed[7][12]=(EditText) findViewById(R.id.editText7C);
        ed[7][13]=(EditText) findViewById(R.id.editText7D);
        ed[7][14]=(EditText) findViewById(R.id.editText7E);
        ed[8][0]=(EditText) findViewById(R.id.editText80);
        ed[8][1]=(EditText) findViewById(R.id.editText81);
        ed[8][2]=(EditText) findViewById(R.id.editText82);
        ed[8][3]=(EditText) findViewById(R.id.editText83);
        ed[8][4]=(EditText) findViewById(R.id.editText84);
        ed[8][5]=(EditText) findViewById(R.id.editText85);
        ed[8][6]=(EditText) findViewById(R.id.editText86);
        ed[8][7]=(EditText) findViewById(R.id.editText87);
        ed[8][8]=(EditText) findViewById(R.id.editText88);
        ed[8][9]=(EditText) findViewById(R.id.editText89);
        ed[8][10]=(EditText) findViewById(R.id.editText8A);
        ed[8][11]=(EditText) findViewById(R.id.editText8B);
        ed[8][12]=(EditText) findViewById(R.id.editText8C);
        ed[8][13]=(EditText) findViewById(R.id.editText8D);
        ed[8][14]=(EditText) findViewById(R.id.editText8E);
        ed[9][0]=(EditText) findViewById(R.id.editText90);
        ed[9][1]=(EditText) findViewById(R.id.editText91);
        ed[9][2]=(EditText) findViewById(R.id.editText92);
        ed[9][3]=(EditText) findViewById(R.id.editText93);
        ed[9][4]=(EditText) findViewById(R.id.editText94);
        ed[9][5]=(EditText) findViewById(R.id.editText95);
        ed[9][6]=(EditText) findViewById(R.id.editText96);
        ed[9][7]=(EditText) findViewById(R.id.editText97);
        ed[9][8]=(EditText) findViewById(R.id.editText98);
        ed[9][9]=(EditText) findViewById(R.id.editText99);
        ed[9][10]=(EditText) findViewById(R.id.editText9A);
        ed[9][11]=(EditText) findViewById(R.id.editText9B);
        ed[9][12]=(EditText) findViewById(R.id.editText9C);
        ed[9][13]=(EditText) findViewById(R.id.editText9D);
        ed[9][14]=(EditText) findViewById(R.id.editText9E);
        ed[10][0]=(EditText) findViewById(R.id.editTextA0);
        ed[10][1]=(EditText) findViewById(R.id.editTextA1);
        ed[10][2]=(EditText) findViewById(R.id.editTextA2);
        ed[10][3]=(EditText) findViewById(R.id.editTextA3);
        ed[10][4]=(EditText) findViewById(R.id.editTextA4);
        ed[10][5]=(EditText) findViewById(R.id.editTextA5);
        ed[10][6]=(EditText) findViewById(R.id.editTextA6);
        ed[10][7]=(EditText) findViewById(R.id.editTextA7);
        ed[10][8]=(EditText) findViewById(R.id.editTextA8);
        ed[10][9]=(EditText) findViewById(R.id.editTextA9);
        ed[10][10]=(EditText) findViewById(R.id.editTextAA);
        ed[10][11]=(EditText) findViewById(R.id.editTextAB);
        ed[10][12]=(EditText) findViewById(R.id.editTextAC);
        ed[10][13]=(EditText) findViewById(R.id.editTextAD);
        ed[10][14]=(EditText) findViewById(R.id.editTextAE);
        ed[11][0]=(EditText) findViewById(R.id.editTextB0);
        ed[11][1]=(EditText) findViewById(R.id.editTextB1);
        ed[11][2]=(EditText) findViewById(R.id.editTextB2);
        ed[11][3]=(EditText) findViewById(R.id.editTextB3);
        ed[11][4]=(EditText) findViewById(R.id.editTextB4);
        ed[11][5]=(EditText) findViewById(R.id.editTextB5);
        ed[11][6]=(EditText) findViewById(R.id.editTextB6);
        ed[11][7]=(EditText) findViewById(R.id.editTextB7);
        ed[11][8]=(EditText) findViewById(R.id.editTextB8);
        ed[11][9]=(EditText) findViewById(R.id.editTextB9);
        ed[11][10]=(EditText) findViewById(R.id.editTextBA);
        ed[11][11]=(EditText) findViewById(R.id.editTextBB);
        ed[11][12]=(EditText) findViewById(R.id.editTextBC);
        ed[11][13]=(EditText) findViewById(R.id.editTextBD);
        ed[11][14]=(EditText) findViewById(R.id.editTextBE);
        ed[12][0]=(EditText) findViewById(R.id.editTextC0);
        ed[12][1]=(EditText) findViewById(R.id.editTextC1);
        ed[12][2]=(EditText) findViewById(R.id.editTextC2);
        ed[12][3]=(EditText) findViewById(R.id.editTextC3);
        ed[12][4]=(EditText) findViewById(R.id.editTextC4);
        ed[12][5]=(EditText) findViewById(R.id.editTextC5);
        ed[12][6]=(EditText) findViewById(R.id.editTextC6);
        ed[12][7]=(EditText) findViewById(R.id.editTextC7);
        ed[12][8]=(EditText) findViewById(R.id.editTextC8);
        ed[12][9]=(EditText) findViewById(R.id.editTextC9);
        ed[12][10]=(EditText) findViewById(R.id.editTextCA);
        ed[12][11]=(EditText) findViewById(R.id.editTextCB);
        ed[12][12]=(EditText) findViewById(R.id.editTextCC);
        ed[12][13]=(EditText) findViewById(R.id.editTextCD);
        ed[12][14]=(EditText) findViewById(R.id.editTextCE);
        ed[13][0]=(EditText) findViewById(R.id.editTextD0);
        ed[13][1]=(EditText) findViewById(R.id.editTextD1);
        ed[13][2]=(EditText) findViewById(R.id.editTextD2);
        ed[13][3]=(EditText) findViewById(R.id.editTextD3);
        ed[13][4]=(EditText) findViewById(R.id.editTextD4);
        ed[13][5]=(EditText) findViewById(R.id.editTextD5);
        ed[13][6]=(EditText) findViewById(R.id.editTextD6);
        ed[13][7]=(EditText) findViewById(R.id.editTextD7);
        ed[13][8]=(EditText) findViewById(R.id.editTextD8);
        ed[13][9]=(EditText) findViewById(R.id.editTextD9);
        ed[13][10]=(EditText) findViewById(R.id.editTextDA);
        ed[13][11]=(EditText) findViewById(R.id.editTextDB);
        ed[13][12]=(EditText) findViewById(R.id.editTextDC);
        ed[13][13]=(EditText) findViewById(R.id.editTextDD);
        ed[13][14]=(EditText) findViewById(R.id.editTextDE);
        ed[14][0]=(EditText) findViewById(R.id.editTextE0);
        ed[14][1]=(EditText) findViewById(R.id.editTextE1);
        ed[14][2]=(EditText) findViewById(R.id.editTextE2);
        ed[14][3]=(EditText) findViewById(R.id.editTextE3);
        ed[14][4]=(EditText) findViewById(R.id.editTextE4);
        ed[14][5]=(EditText) findViewById(R.id.editTextE5);
        ed[14][6]=(EditText) findViewById(R.id.editTextE6);
        ed[14][7]=(EditText) findViewById(R.id.editTextE7);
        ed[14][8]=(EditText) findViewById(R.id.editTextE8);
        ed[14][9]=(EditText) findViewById(R.id.editTextE9);
        ed[14][10]=(EditText) findViewById(R.id.editTextEA);
        ed[14][11]=(EditText) findViewById(R.id.editTextEB);
        ed[14][12]=(EditText) findViewById(R.id.editTextEC);
        ed[14][13]=(EditText) findViewById(R.id.editTextED);
        ed[14][14]=(EditText) findViewById(R.id.editTextEE);
    }

    boolean proverkavvoda(String s2, int r, int y, int x, char napr) {
        boolean flag = true;
        boolean flag1 = false;
        String s3="";
        int[] a=new int[7];
        for (int i = 0; i < 7; i++)
            a[i] = letp[r][i];
        if (flag) {
            if (napr == 'h') {
                for (int i = x - 1; i < x - 1 + s2.length(); i++) {
                    if (p[y - 1][i].equals("") || p[y - 1][i].equals(" ")) {
                        boolean flag2 = false;
                        for (int j = 0; j < 7; j++)
                            if (a[j] == s2.charAt(i - x + 1)) {
                                flag2 = true;
                                a[j] = '-';
                                break;
                            }
                        if (!flag2) {
                            s3 = "You have not letter " + s2.charAt(i - x + 1)+"\n";
                            Toast.makeText(getApplicationContext(), s3, Toast.LENGTH_LONG).show();
                            flag = false;
                        }
                    }
                    else { if (!p[y - 1][i].equals(""))  flag1 = true; }
                    if (p[y - 1][i].equals(" ")) flag1 = true;
                }
            }
            else {
                for (int i = y - 1; i < y - 1 + s2.length(); i++) {
                    if (p[i][x - 1].equals("")  || (p[i][x - 1].equals(" "))) {
                        boolean flag2 = false;
                        for (int j = 0; j < 7; j++)
                            if (a[j] == s2.charAt(i - y + 1)) {
                                flag2 = true;
                                a[j] = '-';
                                break;
                            }
                        if (!flag2) {
                            s3 = "You have not letter " + s2.charAt(i - y + 1)+"\n";
                            Toast.makeText(getApplicationContext(), s3, Toast.LENGTH_LONG).show();
                            flag = false;
                        }
                    }
                    else { if (!p[i][x - 1].equals("")) flag1=true; }
                    if (p[i][x - 1].equals(" ")) flag1 = true;
                }
            }
        }
        if (!flag1) {
            s3="Your word does not apply to others\n";
            Toast.makeText(getApplicationContext(), s3, Toast.LENGTH_LONG).show();
            flag = flag1;
        }
        return flag;
    }
    int letterValue(char ch)
    {
        int value = 0;

        switch (ch)
        {
            case 'A': case 'a':
            case 'E': case 'e':
            case 'I': case 'i':
            case 'L': case 'l':
            case 'N': case 'n':
            case 'O': case 'o':
            case 'R': case 'r':
            case 'S': case 's':
            case 'T': case 't':
            case 'U': case 'u':
            value = 1; break;
            case 'D': case 'd':
            case 'G': case 'g':
            value = 2; break;
            case 'B': case 'b':
            case 'C': case 'c':
            case 'M': case 'm':
            case 'P': case 'p':
            value = 3; break;
            case 'F': case 'f':
            case 'H': case 'h':
            case 'V': case 'v':
            case 'W': case 'w':
            case 'Y': case 'y':
            value = 4; break;
            case 'K': case 'k':
            value = 5; break;
            case 'J': case 'j':
            case 'X': case 'x':
            value = 8; break;
            case 'Q': case 'q':
            case 'Z': case 'z':
            value = 10; break;
        }
        return value;
    }
    int gameScore(String word, int y, int x, char napr)
    {
        int a = 0;
        int b = 0;
        int total = 0;
        int i, q;
        boolean flag1 = false;
        boolean flag2 = false;
        if (napr == 'h') {
            i = y - 1;
            for (int j = 0; j < word.length(); j++)
            {
                q = x - 1 + j;
                if (((i == 0) && (q == 0)) || ((i == 0) && (q == 14)) || ((i == 14) && (q == 0)) || ((i == 14) && (q == 14)) || ((i == 14) && (q == 7)) || ((i == 7) && (q == 0)) || ((i == 7) && (q == 14)) || ((i == 0) && (q == 7))) {
                    flag1 = true;
                    a++;
                    total += letterValue(word.charAt(j));
                }
                else if (((i == q) && ((i < 5) || (i > 9))) || ((i + q == 14) && ((i < 5) || (i > 9)))) {
                    flag2 = true;
                    b++;
                    total += letterValue(word.charAt(j));
                }
                else if (((i == 1) && (q == 5)) || ((i == 1) && (q == 9)) || ((i == 13) && (q == 5)) || ((i == 13) && (q == 9)) || ((i == 5) && (q == 1)) || ((i == 9) && (q == 1)) || ((i == 5) && (q == 13)) || ((i == 9) && (q == 13)))
                    total += 3 * letterValue(word.charAt(j));
                else if (((i == 0) && (q == 3)) || ((i == 0) && (q == 11)) || ((i == 2) && (q == 6)) || ((i == 2) && (q == 8)) || ((i == 3) && (q == 0)) || ((i == 3) && (q == 7)) || ((i == 3) && (q == 14)) || ((i == 6) && (q == 2)) || ((i == 6) && (q == 6)) || ((i == 6) && (q == 8)) || ((i == 6) && (q == 12)) || ((i == 7) && (q == 3)) || ((i == 7) && (q == 11)) || ((i == 8) && (q == 2)) || ((i == 8) && (q == 6)) || ((i == 8) && (q == 8)) || ((i == 8) && (q == 12)) || ((i == 11) && (q == 0)) || ((i == 11) && (q == 7)) || ((i == 11) && (q == 14)) || ((i == 12) && (q == 6)) || ((i == 12) && (q == 8)) || ((i == 14) && (q == 3)) || ((i == 14) && (q == 11)))
                    total += 2 * letterValue(word.charAt(j));
                else total += letterValue(word.charAt(j));
            }
            if (flag1) for (i = 0; i < a; i++) total *= 3;
            else if (flag2) for (i = 0; i < b; i++) total *= 2;
        }
        else {
            q = x - 1;
            for (int j = 0; j < word.length(); j++)
            {
                i = y - 1 + j;
                if (((i == 0) && (q == 0)) || ((i == 0) && (q == 14)) || ((i == 14) && (q == 0)) || ((i == 14) && (q == 14)) || ((i == 14) && (q == 7)) || ((i == 7) && (q == 0)) || ((i == 7) && (q == 14)) || ((i == 0) && (q == 7))) {
                    flag1 = true;
                    a++;
                    total += letterValue(word.charAt(j));
                }
                else if (((i == q) && ((i < 5) || (i > 9))) || ((i + q == 14) && ((i < 5) || (i > 9)))) {
                    flag2 = true;
                    b++;
                    total += letterValue(word.charAt(j));
                }
                else if (((i == 1) && (q == 5)) || ((i == 1) && (q == 9)) || ((i == 13) && (q == 5)) || ((i == 13) && (q == 9)) || ((i == 5) && (q == 1)) || ((i == 9) && (q == 1)) || ((i == 5) && (q == 13)) || ((i == 9) && (q == 13)))
                    total += 3 * letterValue(word.charAt(j));
                else if (((i == 0) && (q == 3)) || ((i == 0) && (q == 11)) || ((i == 2) && (q == 6)) || ((i == 2) && (q == 8)) || ((i == 3) && (q == 0)) || ((i == 3) && (q == 7)) || ((i == 3) && (q == 14)) || ((i == 6) && (q == 2)) || ((i == 6) && (q == 6)) || ((i == 6) && (q == 8)) || ((i == 6) && (q == 12)) || ((i == 7) && (q == 3)) || ((i == 7) && (q == 11)) || ((i == 8) && (q == 2)) || ((i == 8) && (q == 6)) || ((i == 8) && (q == 8)) || ((i == 8) && (q == 12)) || ((i == 11) && (q == 0)) || ((i == 11) && (q == 7)) || ((i == 11) && (q == 14)) || ((i == 12) && (q == 6)) || ((i == 12) && (q == 8)) || ((i == 14) && (q == 3)) || ((i == 14) && (q == 11)))
                    total += 2 * letterValue(word.charAt(j));
                else total += letterValue(word.charAt(j));
            }
            if (flag1) for (i = 0; i < a; i++) total *= 3;
            else if (flag2) for (i = 0; i < b; i++) total *= 2;
        }
        return total;
    }
    boolean proverka2(String s, int r, int y, int x, char napr) {
        boolean flag = true;
        boolean flag1 = false;
        boolean flag3 = false;
        int[] a=new int[7];
        for (int i = 0; i < 7; i++)
            a[i] = letp[r][i];
        if ((x > 15) || (y > 15))
            flag = false;
        else {
            if (napr == 'h') {
                if (x + s.length()-1 > 15)
                    flag = false;
            }
            else if (y + s.length()-1 > 15)
                flag = false;
        }
        if (flag) {
            if (napr == 'h') {
                for (int i = x - 1; i < x - 1 + s.length(); i++) {
                    if (p[y - 1][i].equals("") || p[y - 1][i].equals(" ")) {
                        boolean flag2 = false;
                        for (int j = 0; j < 7; j++)
                            if (a[j] == s.charAt(i - x + 1)) {
                                flag2 = true;
                                a[j] = '-';
                                flag3 = true;
                                break;
                            }
                        if (!flag2)
                            flag = false;
                    }
                    else { if (!p[y - 1][i].equals(" ")) if (p[y - 1][i].charAt(0)!=s.charAt(i - x + 1)) { flag1 = true; flag = false; } else flag1 = true; }
                    if (p[y - 1][i].equals(" ")) flag1 = true;
                }
            }
            else {
                for (int i = y - 1; i < y - 1 + s.length(); i++) {
                    if (p[i][x - 1].equals("") || (p[i][x - 1].equals(" "))) {
                        boolean flag2 = false;
                        for (int j = 0; j < 7; j++)
                            if (a[j] == s.charAt(i - y + 1)) {
                                flag2 = true;
                                a[j] = '-';
                                flag3 = true;
                                break;
                            }
                        if (!flag2)
                            flag = false;
                    }
                    else { if (!p[i][x - 1].equals(" ")) if (p[i][x - 1].charAt(0) != s.charAt(i - y + 1)) { flag1 = true;  flag = false; } else flag1 = true; }
                    if (p[i][x - 1].equals(" ")) flag1 = true;
                }
            }
        }
        if (!flag1)
            flag = flag1;
        if (!flag3)
            flag = flag3;
        return flag;
    }
    boolean proverka3(String s, int r, int y, int x, char napr) {
        boolean flag = true;
        boolean flag1 = false;
        boolean flag3 = false;
        int[] a=new int[7];
        for (int i = 0; i < 7; i++)
            a[i] = let1[r][i];
        if ((x > 15) || (y > 15))
            flag = false;
        else {
            if (napr == 'h') {
                if (x + s.length()-1 > 15)
                    flag = false;
            }
            else if (y + s.length()-1 > 15)
                flag = false;
        }
        if (flag) {
            if (napr == 'h') {
                for (int i = x - 1; i < x - 1 + s.length(); i++) {
                    if (p1[y - 1][i].equals("") || p1[y - 1][i].equals(" ")) {
                        boolean flag2 = false;
                        for (int j = 0; j < 7; j++)
                            if (a[j] == s.charAt(i - x + 1)) {
                                flag2 = true;
                                a[j] = '-';
                                flag3 = true;
                                break;
                            }
                        if (!flag2)
                            flag = false;
                    }
                    else { if (!p1[y - 1][i].equals(" ")) if (p1[y - 1][i].charAt(0)!=s.charAt(i - x + 1)) { flag1 = true; flag = false; } else flag1 = true; }
                    if (p1[y - 1][i].equals(" ")) flag1 = true;
                }
            }
            else {
                for (int i = y - 1; i < y - 1 + s.length(); i++) {
                    if (p1[i][x - 1].equals("") || (p1[i][x - 1].equals(" "))) {
                        boolean flag2 = false;
                        for (int j = 0; j < 7; j++)
                            if (a[j] == s.charAt(i - y + 1)) {
                                flag2 = true;
                                a[j] = '-';
                                flag3 = true;
                                break;
                            }
                        if (!flag2)
                            flag = false;
                    }
                    else { if (!p1[i][x - 1].equals(" ")) if (p1[i][x - 1].charAt(0) != s.charAt(i - y + 1)) { flag1 = true;  flag = false; } else flag1 = true; }
                    if (p1[i][x - 1].equals(" ")) flag1 = true;
                }
            }
        }
        if (!flag1)
            flag = flag1;
        if (!flag3)
            flag = flag3;
        return flag;
    }
    void podskaz(int r) {
        int max = 0;
        String word;
        String word1="";
        for (int i = 0; i <words.length; i++) {
            word=words[i];
            for (int j = 0; j < 15; j++) {
                for (int q = 0; q < 15; q++) {
                    if (proverka2(word, r, j + 1, q + 1, 'h')) {
                        if (gameScore(word, j + 1, q + 1, 'h') > max) {
                            max = gameScore(word, j + 1, q + 1, 'h');
                            word1 = word;
                        }
                    }
                    if (proverka2(word, r, j + 1, q + 1, 'v')) {
                        if (gameScore(word, j + 1, q + 1, 'v') > max) {
                            max = gameScore(word, j + 1, q + 1, 'v');
                            word1 = word;
                        }
                    }
                }
            }
        }
        if (max == 0)
            Toast.makeText(getApplicationContext(), "you can not collect the word", Toast.LENGTH_LONG).show();
        else {
            enterword.setText(word1);
        }
    }

    @Override
    public void onClick(View v) {
        if (v.getId()==R.id.button){
            d=0;
            for (int i=0; i<26; i++){
                d+=alf[i];
            }
            if (d<7){
                if (sum[0]>sum[1])
                    s="Player win";
                else if (sum[0]==sum[1])
                    s="draw";
                else s="Computer win";
                Toast.makeText(getApplicationContext(), s, Toast.LENGTH_LONG).show();
                Intent other = new Intent(this, MainActivity.class);
                startActivity(other);
                for (int i=0; i<15; i++) {
                    for (int j = 0; j < 15; j++) {
                        p[i][j] = "";
                        ed[i][j].setText("");
                    }
                }
                p[7][7]=" ";
                sum[0]=0;
                sum[1]=0;
                q1=1;
                s="Player has "+sum[0]+" points   Computer has "+sum[1]+" points";
                point.setText(s);
                s="Player turn";
                turn.setText(s);
                wordcon.setVisibility(View.INVISIBLE);
                confirm.setVisibility(View.INVISIBLE);
                clet.setVisibility(View.INVISIBLE);
                alf=new int[]{
                        9, 2, 2, 4, 12, 2, 3, 2, 9, 1, 1, 4, 2, 6, 8, 2, 1, 6, 4, 6, 4, 2, 2, 1, 2, 1 };
                for (int i = 0; i < 2; i++) {
                    for (int j = 0; j < 7; j++) {
                        do letp[i][j] = (char) ((int) (Math.random() * 26) + 'A');
                        while (alf[letp[i][j] - 'A'] == 0);
                        alf[letp[i][j] - 'A']--;
                    }
                }
                for (int z=0; z<7; z++)
                    s=s+letp[q1-1][z]+" ";
                let.setText(s);
            }
            for (int i=0; i<7; i++){
                if (letp[q1-1][i]=='-'){
                    do letp[q1-1][i] = (char) ((int) (Math.random() * 26) + 'A');
                    while (alf[letp[q1-1][i] - 'A'] == 0);
                    alf[letp[q1-1][i] - 'A']--;
                }
            }
            btn1.setVisibility(View.VISIBLE);
            if (g==7){
                sum[q1-1]+=15;
                s="Player has "+sum[0]+" points   Computer has "+sum[1]+" points";
                point.setText(s);
                s = "you got 15 points for using all the letters";
                Toast.makeText(getApplicationContext(), s, Toast.LENGTH_LONG).show();
            }
            g=0;
            q1=q1%m+1;
            if (q1==1)
            s="Player turn";
            else s="Computer turn";
            turn.setText(s);
            for (int a=0; a<15; a++){
                for (int b=0; b<15; b++){
                    p[a][b]=ed[a][b].getText().toString();
                }
            }
            if (p[7][7].equals("")) p[7][7]=" ";
            s="Your letters: ";
            for (int z=0; z<7; z++)
                s=s+letp[q1-1][z]+" ";
            let.setText(s);
            if (q1==2) {
                btn.setVisibility(View.INVISIBLE);
                newgame.setVisibility(View.INVISIBLE);
                helper.setVisibility(View.INVISIBLE);
                btn1.setVisibility(View.INVISIBLE);
                check.setVisibility(View.INVISIBLE);
                start.setVisibility(View.VISIBLE);
            }
        }
        if (v.getId()==R.id.start){
            int y1=0, x1=0, y2=0, x2=0;
            int sum1 = 0;
            boolean flag4 = false;
            char nap1='h', nap2='h';
            String str01, str2, s1="", s2="";
            g = 0;
            for (int i = 0; i <words.length; i++) {
                str01=words[i];
                for (int j = 0; j < 15; j++) {
                    for (int q = 0; q < 15; q++) {
                        if (proverka2(str01, 1, j + 1, q + 1, 'h')) {
                            for (int u = 0; u < 7; u++)
                                let1[0][u] = letp[1][u];
                            for (int i1=0; i1<15; i1++)
                                for (int j1 = 0; j1 < 15; j1++)
                                    p1[i1][j1] = p[i1][j1];
                            for (int i2=q; i2<q+str01.length(); i2++)
                                if (p1[j][i2].equals("") || p1[j][i2].equals(" ")) {
                                    String c=""+str01.charAt(i2 - q);
                                    p1[j][i2] = c;
                                    for (int u=0; u<7; u++)
                                        if (let1[0][u] == str01.charAt(i2 - q)) {
                                            let1[0][u] = '-';
                                            break;
                                        }
                                }
                            if (gameScore(str01, j + 1, q + 1, 'h') > sum1) {
                                sum1=gameScore(str01, j + 1, q + 1, 'h');
                                s1 = str01;
                                y1 = j;
                                x1 = q;
                                nap1 = 'h';
                                flag4 = false;
                            }
                            for (int i3 = 0; i3 < words.length; i3++) {
                                str2=words[i3];
                                for (int j2 = 0; j2 < 15; j2++) {
                                    for (int q2 = 0; q2 < 15; q2++) {
                                        if (proverka3(str2, 0, j2 + 1, q2 + 1, 'h')) {
                                            if (gameScore(str01, j + 1, q + 1, 'h') + gameScore(str2, j2 + 1, q2 + 1, 'h') > sum1) {
                                                sum1 = gameScore(str01, j + 1, q + 1, 'h') + gameScore(str2, j2 + 1, q2 + 1, 'h');
                                                y1 = j;
                                                x1 = q;
                                                nap1 = 'h';
                                                y2 = j2;
                                                x2 = q2;
                                                nap2 = 'h';
                                                s1 = str01;
                                                s2 = str2;
                                                flag4 = true;
                                            }
                                        }
                                        if (proverka3(str2, 0, j2 + 1, q2 + 1, 'v')) {
                                            if (gameScore(str01, j + 1, q + 1, 'h') + gameScore(str2, j2 + 1, q2 + 1, 'h') > sum1) {
                                                sum1 = gameScore(str01, j + 1, q + 1, 'h') + gameScore(str2, j2 + 1, q2 + 1, 'v');
                                                y1 = j;
                                                x1 = q;
                                                nap1 = 'h';
                                                y2 = j2;
                                                x2 = q2;
                                                nap2= 'v';
                                                s1 = str01;
                                                s2 = str2;
                                                flag4 = true;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        if (proverka2(str01, 1, j + 1, q + 1, 'v')) {
                            for (int u = 0; u < 7; u++)
                                let1[0][u] = letp[1][u];
                            for (int i1 = 0; i1 < 15; i1++)
                                for (int j1 = 0; j1 < 15; j1++)
                                    p1[i1][j1] = p[i1][j1];
                            for (int j2 = j; j2 < j+str01.length(); j2++)
                                if (p1[j2][q].equals("") || p1[j2][q].equals(" ")) {
                                    String c=""+str01.charAt(j2-j);
                                    p1[j2][q] = c;
                                    for (int u = 0; u < 7; u++)
                                        if (let1[0][u] == str01.charAt(j2 - j)) {
                                            let1[0][u] = '-';
                                            break;
                                        }
                                }
                            if (gameScore(str01, j + 1, q + 1, 'v') > sum1) {
                                sum1=gameScore(str01, j + 1, q + 1, 'v');
                                s1 = str01;
                                y1 = j;
                                x1 = q;
                                nap1 = 'v';
                                flag4 = false;
                            }
                            for (int i3 = 0; i3 < words.length; i3++) {
                                str2=words[i3];
                                for (int j2 = 0; j2 < 15; j2++) {
                                    for (int q2 = 0; q2 < 15; q2++) {
                                        if (proverka3(str2, 0, j2 + 1, q2 + 1, 'h')) {
                                            if (gameScore(str01, j + 1, q + 1, 'v') + gameScore(str2, j2 + 1, q2 + 1, 'h') > sum1) {
                                                sum1 = gameScore(str01, j + 1, q + 1, 'v') + gameScore(str2, j2 + 1, q2 + 1, 'h');
                                                y1 = j;
                                                x1 = q;
                                                nap1 = 'v';
                                                y2 = j2;
                                                x2 = q2;
                                                nap2 = 'h';
                                                s1 = str01;
                                                s2 = str2;
                                                flag4 = true;
                                            }
                                        }
                                        if (proverka3(str2, 0, j2 + 1, q2 + 1, 'v')) {
                                            if (gameScore(str01, j + 1, q + 1, 'v') + gameScore(str2, j2 + 1, q2 + 1, 'h') > sum1) {
                                                sum1 = gameScore(str01, j + 1, q + 1, 'v') + gameScore(str2, j2 + 1, q2 + 1, 'v');
                                                y1 = j;
                                                x1 = q;
                                                nap1 = 'v';
                                                y2 = j2;
                                                x2 = q2;
                                                nap2 = 'v';
                                                s1 = str01;
                                                s2 = str2;
                                                flag4 = true;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if (sum1 == 0) {
                for (int i = 0; i < 7; i++) {
                    alf[letp[1][i] - 'A']++;
                    do letp[1][i] = (char) ((int) (Math.random() * 26) + 'A');
                    while (alf[letp[1][i] - 'A'] == 0);
                    alf[letp[1][i] - 'A']--;
                }
            }
            else {
                sum[1] += sum1;
                if (nap1 == 'h') {
                    for (int i2 = x1; i2 < x1+s1.length(); i2++)
                        if (p[y1][i2].equals("") || p[y1][i2].equals(" ")) {
                            String c=""+s1.charAt(i2-x1);
                            p[y1][i2] = c;
                            for (int u = 0; u < 7; u++)
                                if (letp[1][u] == s1.charAt(i2 - x1)) {
                                    letp[1][u] = '-';
                                    break;
                                }
                        }
                }
                if (nap1 == 'v') {
                    for (int j2 = y1; j2 < y1+s1.length(); j2++)
                        if (p[j2][x1].equals("") || p[j2][x1].equals(" ")) {
                            String c=""+s1.charAt(j2-y1);
                            p[j2][x1] = c;
                            for (int u = 0; u < 7; u++)
                                if (letp[1][u] == s1.charAt(j2 - y1)) {
                                    letp[1][u] = '-';
                                    break;
                                }
                        }
                }
                if (flag4) {
                    if (nap2 == 'h') {
                        for (int i2 = x2; i2 < x2+s2.length(); i2++)
                            if (p[y2][i2].equals("") || p[y2][i2].equals(" ")) {
                                String c=""+s2.charAt(i2-x2);
                                p[y2][i2] = c;
                                for (int u = 0; u < 7; u++)
                                    if (letp[1][u] == s2.charAt(i2 - x2)) {
                                        letp[1][u] = '-';
                                        break;
                                    }
                            }
                    }
                    if (nap2 == 'v') {
                        for (int i2 = y2; i2 < y2+s2.length(); i2++)
                            if (p[i2][x2].equals("") || p[i2][x2].equals(" ")) {
                                String c=""+s2.charAt(i2-y2);
                                p[i2][x2] = c;
                                for (int u = 0; u < 7; u++)
                                    if (letp[1][u] == s2.charAt(i2 - y2)) {
                                        letp[1][u] = '-';
                                        break;
                                    }
                            }
                    }
                }
            }
            s=s1+" "+s2;
            enterword.setText(s);
            if (g == 7) sum[1] += 15;
            d=0;
            for (int i=0; i<26; i++){
                d+=alf[i];
            }
            if (d<7){
                if (sum[0]>sum[1])
                    s="Player win";
                else if (sum[0]==sum[1])
                    s="draw";
                else s="Computer win";
                Toast.makeText(getApplicationContext(), s, Toast.LENGTH_LONG).show();
                Intent other = new Intent(this, MainActivity.class);
                startActivity(other);
                for (int i=0; i<15; i++) {
                    for (int j = 0; j < 15; j++) {
                        p[i][j] = "";
                        ed[i][j].setText("");
                    }
                }
                p[7][7]=" ";
                sum[0]=0;
                sum[1]=0;
                q1=1;
                s="Player has "+sum[0]+" points   Computer has "+sum[1]+" points";
                point.setText(s);
                s="Player turn";
                turn.setText(s);
                wordcon.setVisibility(View.INVISIBLE);
                confirm.setVisibility(View.INVISIBLE);
                clet.setVisibility(View.INVISIBLE);
                alf=new int[]{
                        9, 2, 2, 4, 12, 2, 3, 2, 9, 1, 1, 4, 2, 6, 8, 2, 1, 6, 4, 6, 4, 2, 2, 1, 2, 1 };
                for (int i = 0; i < 2; i++) {
                    for (int j = 0; j < 7; j++) {
                        do letp[i][j] = (char) ((int) (Math.random() * 26) + 'A');
                        while (alf[letp[i][j] - 'A'] == 0);
                        alf[letp[i][j] - 'A']--;
                    }
                }
                for (int z=0; z<7; z++)
                    s=s+letp[q1-1][z]+" ";
                let.setText(s);
            }
            for (int i = 0; i < 7; i++) {
                boolean flag7 = false;
                if (letp[1][i] == '-') flag7 = true;
                if (flag7) {
                    do if (letp[1][i] == '-' || alf[letp[1][i] - 'A'] == 0) letp[1][i] = (char) ((int) (Math.random() * 26) + 'A');
                    while (alf[letp[1][i] - 'A'] == 0);
                    alf[letp[1][i] - 'A']--;
                    g++;
                }
            }
            if (g==7) sum[1]+=15;
            g=0;
            s="Player has "+sum[0]+" points   Computer has "+sum[1]+" points";
            point.setText(s);
            q1=q1%2+1;
            s="Player turn";
            turn.setText(s);
            for (int i=0; i<15; i++) {
                for (int j = 0; j < 15; j++) {
                    ed[i][j].setText(p[i][j]);
                }
            }
            if (ed[7][7].getText().toString().equals(" ")) ed[7][7].setText("");
            for (int i=0; i<15; i++)
                for (int j=0; j<15; j++)
                    if (!ed[i][j].getText().toString().equals("")) ed[i][j].setEnabled(false);
            btn.setVisibility(View.VISIBLE);
            newgame.setVisibility(View.VISIBLE);
            helper.setVisibility(View.VISIBLE);
            btn1.setVisibility(View.VISIBLE);
            check.setVisibility(View.VISIBLE);
            start.setVisibility(View.INVISIBLE);
            s="Your letters: ";
            for (int z=0; z<7; z++)
                s=s+letp[q1-1][z]+" ";
            let.setText(s);
        }
        if (v.getId()==R.id.clet){
            confirm.setVisibility(View.VISIBLE);
            clet.setVisibility(View.VISIBLE);
        }
        if (v.getId()==R.id.confirm){
            confirm.setVisibility(View.INVISIBLE);
            clet.setVisibility(View.INVISIBLE);
            for (int i=0; i<clet.getText().toString().length(); i++){
                for (int j=0; j<7; j++){
                    if (letp[q1-1][j]==clet.getText().toString().charAt(i)){
                        do letp[q1-1][j] = (char) ((int) (Math.random() * 26) + 'A');
                        while (alf[letp[q1-1][j] - 'A'] == 0);
                        alf[letp[q1-1][j] - 'A']--;
                        break;
                    }
                }
            }
            q1=q1%m+1;
            s="Computer turn";
            turn.setText(s);
            s="Your letters: ";
            for (int z=0; z<7; z++)
                s=s+letp[q1-1][z]+" ";
            let.setText(s);
            btn.setVisibility(View.INVISIBLE);
            newgame.setVisibility(View.INVISIBLE);
            helper.setVisibility(View.INVISIBLE);
            btn1.setVisibility(View.INVISIBLE);
            check.setVisibility(View.INVISIBLE);
            start.setVisibility(View.VISIBLE);
        }
        if (v.getId()==R.id.confword){
            str="";
            str1="";
            int w1=0, u1=0;
            int w2=0, u2=0;
            char napr='a';
            boolean flag=false, flag8=true;
            for (int w=0; w<15; w++){
                for (int u=0; u<15; u++) {
                    if (!(ed[w][u].getText().toString().equals(p[w][u]))) {
                        if (flag) {
                            if (w == w2 + 1 || u == u2 + 1) {
                                str = str + ed[w][u].getText().toString();
                                w2=w;
                                u2=u;
                            }
                        }
                        if (!flag){
                            w1=w;
                            u1=u;
                            w2=w;
                            u2=u;
                            str=str+ed[w][u].getText().toString();
                            str1=str1+ed[w][u].getText().toString();
                        }
                        else {
                            if (w == w1) {
                                napr = 'h';
                                str1=str1+ed[w][u].getText().toString();
                            }
                            else {
                                if (u == u1) napr = 'v';
                                str1=str1+ed[w][u].getText().toString();
                            }
                        }
                        flag=true;
                        if (ed[w][u].getText().toString().length()>1)
                            flag8=false;
                    }
                }
            }
            if (str1.length()==1){
                String s4;
                for (int i=0; i<15; i++) {
                    for (int j = 0; j <= 15 - enterword.getText().toString().length(); j++) {
                        s4 = "";
                        for (int k = 0; k < enterword.getText().toString().length(); k++) {
                            if (ed[i][j+k].getText().toString().equals(""))
                                break;
                            s4 = s4 + ed[i][j+k].getText().toString();
                            if (s4.equals(enterword.getText().toString()) && i==w1 && j+k>=u1 && j<=u1) {
                                w1=i;
                                u1=j;
                                napr = 'h';
                                break;
                            }
                        }
                    }
                }
                for (int j=0; j<15; j++) {
                    for (int i = 0; i <= 15 - enterword.getText().toString().length(); i++) {
                        s4 = "";
                        for (int k = 0; k < enterword.getText().toString().length(); k++) {
                            if (ed[i+k][j].getText().toString().equals(""))
                                break;
                            s4 = s4 + ed[i+k][j].getText().toString();
                            if (s4.equals(enterword.getText().toString()) && j==u1 && i+k>=w1 && i<=w1) {
                                w1=i;
                                u1=j;
                                napr = 'v';
                                break;
                            }
                        }
                    }
                }
            }
            if (enterword.getText().toString().contains(str)) {
                if (str1.length()!=1){
                    String s1;
                    for (int r = 0; r <= enterword.getText().toString().length() - str.length(); r++) {
                        s1 = "";
                        for (int t = 0; t < str.length(); t++) {
                            s1 = s1 + enterword.getText().toString().charAt(r + t);
                            if (s1.equals(str)) {
                                if (napr == 'h') u1 = u1 - r;
                                if (napr == 'v') w1 = w1 - r;
                                break;
                            }
                        }
                    }
                }
                if (proverkavvoda(enterword.getText().toString(), q1 - 1, w1 + 1, u1 + 1, napr)&& flag8) {
                    sum[q1 - 1] += gameScore(enterword.getText().toString(), w1 + 1, u1 + 1, napr);
                    for (int a = 0; a < 15; a++) {
                        for (int b = 0; b < 15; b++) {
                            p[a][b] = ed[a][b].getText().toString();
                        }
                    }
                    for (int i=0; i<15; i++)
                        for (int j=0; j<15; j++)
                            if (!ed[i][j].getText().toString().equals("")) ed[i][j].setEnabled(false);
                    s="Player has "+sum[0]+" points   Computer has "+sum[1]+" points";
                    point.setText(s);
                    btn1.setVisibility(View.INVISIBLE);
                    for (int i = 0; i < str1.length(); i++) {
                        for (int f = 0; f < 7; f++) {
                            if (letp[q1 - 1][f] == str1.charAt(i)) {
                                letp[q1 - 1][f] = '-';
                                g++;
                                break;
                            }
                        }
                    }
                    s = "Your letters: ";
                    for (int z = 0; z < 7; z++)
                        s = s + letp[q1 - 1][z] + " ";
                    let.setText(s);
                }
                wordcon.setVisibility(View.INVISIBLE);
            }
            else {
                s = "you wrote another word";
                Toast.makeText(getApplicationContext(), s, Toast.LENGTH_LONG).show();
                wordcon.setVisibility(View.INVISIBLE);
            }
            if (p[7][7].equals("")) p[7][7]=" ";
        }
        if (v.getId()==R.id.check){
            boolean flag5=false;
            for (int i=0; i<words.length; i++){
                if (words[i].equals(enterword.getText().toString()))
                    flag5=true;
            }
            if (flag5)
                wordcon.setVisibility(View.VISIBLE);
            else{
                s="it isn't word";
                Toast.makeText(getApplicationContext(), s, Toast.LENGTH_LONG).show();
            }
        }
        if (v.getId()==R.id.newgame){
            if (sum[0]>sum[1])
                s="Player win";
            else if (sum[0]==sum[1])
                s="draw";
            else s="Computer win";
            Toast.makeText(getApplicationContext(), s, Toast.LENGTH_LONG).show();
            Intent other = new Intent(this, MainActivity.class);
            startActivity(other);
            for (int i=0; i<15; i++) {
                for (int j = 0; j < 15; j++) {
                    p[i][j] = "";
                    ed[i][j].setText("");
                }
            }
            p[7][7]=" ";
            sum[0]=0;
            sum[1]=0;
            q1=1;
            s="Player has "+sum[0]+" points   Computer has "+sum[1]+" points";
            point.setText(s);
            s="Player turn";
            turn.setText(s);
            wordcon.setVisibility(View.INVISIBLE);
            confirm.setVisibility(View.INVISIBLE);
            clet.setVisibility(View.INVISIBLE);
            alf=new int[]{
                    9, 2, 2, 4, 12, 2, 3, 2, 9, 1, 1, 4, 2, 6, 8, 2, 1, 6, 4, 6, 4, 2, 2, 1, 2, 1 };
            for (int i = 0; i < 2; i++) {
                for (int j = 0; j < 7; j++) {
                    do letp[i][j] = (char) ((int) (Math.random() * 26) + 'A');
                    while (alf[letp[i][j] - 'A'] == 0);
                    alf[letp[i][j] - 'A']--;
                }
            }
            for (int z=0; z<7; z++)
                s=s+letp[q1-1][z]+" ";
            let.setText(s);
        }
        if (v.getId()==R.id.helper){
            podskaz(q1-1);
        }
    }
}

